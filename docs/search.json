[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "How Timing and Intensity Shape Success",
    "section": "",
    "text": "1 Report",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "index.html#prepared-for",
    "href": "index.html#prepared-for",
    "title": "How Timing and Intensity Shape Success",
    "section": "1.1 Prepared for",
    "text": "1.1 Prepared for\nPrepared for the University of Virginia Men’s Basketball program. This report is intended to support coaches and athletic trainers in making informed decisions based on player workload data collected through Catapult wearable technology.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "index.html#problem-statement",
    "href": "index.html#problem-statement",
    "title": "How Timing and Intensity Shape Success",
    "section": "1.2 Problem Statement",
    "text": "1.2 Problem Statement\nIn basketball, performance is more than raw effort. Every sprint, jump, and cut adds to the physical toll players experience. What if success has less to do with how much energy is used, and more to do with when and how it is applied? This report uses two seasons of Catapult data to investigate whether patterns in workload and effort explain differences in team performance. Our goal was to uncover patterns that could guide coaching strategies related to training, rest, and in-game effort. We focused on three guiding questions. First, do workload patterns vary by position and game outcome? Second, how does intensity change across the season? Third, can explosive effort tell us anything about player readiness and team momentum?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "index.html#analysis",
    "href": "index.html#analysis",
    "title": "How Timing and Intensity Shape Success",
    "section": "1.3 Analysis",
    "text": "1.3 Analysis\nWe started by reviewing all the player load data across both seasons. Then we focused on three variables. These were average player load by position, player load per minute each week, and explosive efforts during games. Our goal was to find a story in the data that coaches could use to make informed decisions about training and strategy. When we looked at player load by position, we saw that guards and forwards tended to have lower average loads in games that ended in wins. Centers had about the same load whether the team won or lost. This suggests that efficient and well-paced effort leads to better outcomes. It also suggests adjusting intensity by position in both practice and in-game strategy. When looking at weekly load per minute, we found that Season 2 had much higher levels of effort between Weeks 11 and 21. During that time, the team had a stronger win record compared to the same section in Season 1. This might suggest that higher physical intensity in the middle of the season improved overall fitness.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "index.html#conclusion",
    "href": "index.html#conclusion",
    "title": "How Timing and Intensity Shape Success",
    "section": "1.4 Conclusion",
    "text": "1.4 Conclusion\nOur findings highlight a key pattern. The team’s strongest performances often came during periods when effort was managed with intention rather than sustained at a constant high level. Guards and forwards had lower average player loads in games that ended in wins, which suggests that pacing and role-based effort matter. Load per minute increased mid-season and corresponded with stronger results, highlighting the value of training intensity that rises at the right times. Explosive effort patterns also appeared to align with wins and losses, offering possible early indicators of momentum or fatigue. This all points to one story. Winning is often achieved not by exerting more effort, but by directing effort more intentionally. This includes personalized load management and strategic practice planning. Moving forward, coaches can use these metrics to spot early signs of burnout, plan smarter practices, and adjust training intensity to prepare for key parts of the season. This data is a blueprint for better planning and long-term player readiness.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "datacleaning.html",
    "href": "datacleaning.html",
    "title": "2  Data Cleaning",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\nFirst, we need to load the data, and see what it looks like\n\nseason1 = pd.read_csv('~/Downloads/DS2023/Final Project/catapult season 1(in).csv')\nseason2 = pd.read_csv('~/Downloads/DS2023/Final Project/catapult season 2(in).csv')\n\n\nseason1.head()\n\n\n\n\n\n\n\n\nDate\nAbout\nPosition\nPeriod Number\nPeriod\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\n...\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nevent-uuid\ngroup-uuid\n\n\n\n\n0\n3/14/2023\nAthlete I\nGuard\n1\n1. Pre Practice\n0\n87.437\n4.1\n3\n17\n...\n24.0\n95.0\n1.05\n269.0\n306.0\n89.0\n899.0\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n1\n3/14/2023\nAthlete I\nGuard\n2\n2. Drill_Offense_ Flare, Rescreen_Half Court_4v4\n0\n34.257\n8.2\n4\n4\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n2\n3/14/2023\nAthlete I\nGuard\n3\n3. Drill_Defense_PCM_Half Court_4v4\n0\n31.399\n9.9\n1\n4\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n3\n3/14/2023\nAthlete I\nGuard\n4\n4. Drill_Defense_Lane Width Slide_Full Court_1v1\n0\n13.616\n7.0\n1\n2\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n4\n3/14/2023\nAthlete I\nGuard\n5\n5. Drill_Defense_Fake Game_Half Court_2v2\n0\n28.724\n7.7\n2\n8\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n\n\n5 rows × 53 columns\n\n\n\n\nseason2.head()\n\n\n\n\n\n\n\n\nDate\nAbout\nPosition\nPeriod Number\nPeriod\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\n...\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nevent-uuid\ngroup-uuid\n\n\n\n\n0\n3/13/2024\nAthlete E\nForward\n1\n1. Pre Practice\n0\n228.177\n4.9\n11\n36\n...\n23.0\n197.0\n1.75\n266.0\n281.0\n91.0\n957.0\n20.67\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n1\n3/13/2024\nAthlete E\nForward\n2\n2. Drill_Defense_Fake Game_Half Court_1v1\n0\n30.349\n7.4\n1\n3\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n2\n3/13/2024\nAthlete E\nForward\n3\n3. Drill_Defense_Ball Screen Breakdown to Rebo...\n0\n27.615\n5.1\n3\n4\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n3\n3/13/2024\nAthlete E\nForward\n4\n4. Play_Defense_Scramble_Half Court_5v5\n0\n61.841\n6.5\n11\n9\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n4\n3/13/2024\nAthlete E\nForward\n5\n5. Play_Defense_Half Court D_Half Court_5vG\n0\n60.133\n5.3\n6\n7\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n\n\n5 rows × 53 columns\n\n\n\n\nseason1.isnull().sum()\n\nDate                                0\nAbout                               0\nPosition                            0\nPeriod Number                       0\nPeriod                              0\nTotal Acceleration Efforts          0\nTotal Player Load                   0\nPlayer Load Per Minute              0\nIMA Accel Low                       0\nIMA Decel Low                       0\nIMA CoD Left Low                    0\nIMA CoD Right Low                   0\nIMA Accel Medium                    0\nIMA Decel Medium                    0\nIMA CoD Left Medium                 0\nIMA CoD Right Medium                0\nIMA Accel High                      0\nIMA Decel High                      0\nIMA Accel Total                     0\nIMA Decel Total                     0\nIMA CoD Left High                   0\nIMA CoD Right High                  0\nIMA Jump Count Low Band             0\nIMA Jump Count Med Band             0\nIMA Jump Count High Band            0\nExplosive Efforts                   0\nSession Total Jumps             14491\nSession Accel Low               14491\nSession Decel Low               14491\nSession CoD Left Low            14491\nSession CoD Right Low           14491\nSession Accel Med               14491\nSession Decel Medium            14491\nSession CoD Left Medium         14491\nSession CoD Right Medium        14491\nSession IMA Accel High          14491\nSession Decel High              14491\nSession CoD Left High           14491\nSession CoD Right High          14491\nSession IMA Accel Total         14491\nSession IMA Decel Total         14491\nSession Jump Count Low Band     14491\nSession Jump Count Med Band     14491\nSession Jump Count High Band    14491\nSession Total Jump              14491\nSession Jumps Per Minute        14491\nTotal CoD Left                  14491\nTotal CoD Right                 14491\nTotal High IMA                  14491\nTotal IMA                       14491\nIMA/Min                         16070\nevent-uuid                          0\ngroup-uuid                          0\ndtype: int64\n\n\n\nseason2.isnull().sum()\n\nDate                                0\nAbout                               0\nPosition                            0\nPeriod Number                       0\nPeriod                              0\nTotal Acceleration Efforts          0\nTotal Player Load                   0\nPlayer Load Per Minute              0\nIMA Accel Low                       0\nIMA Decel Low                       0\nIMA CoD Left Low                    0\nIMA CoD Right Low                   0\nIMA Accel Medium                    0\nIMA Decel Medium                    0\nIMA CoD Left Medium                 0\nIMA CoD Right Medium                0\nIMA Accel High                      0\nIMA Decel High                      0\nIMA Accel Total                     0\nIMA Decel Total                     0\nIMA CoD Left High                   0\nIMA CoD Right High                  0\nIMA Jump Count Low Band             0\nIMA Jump Count Med Band             0\nIMA Jump Count High Band            0\nExplosive Efforts                   0\nSession Total Jumps             11716\nSession Accel Low               11716\nSession Decel Low               11716\nSession CoD Left Low            11716\nSession CoD Right Low           11716\nSession Accel Med               11716\nSession Decel Medium            11716\nSession CoD Left Medium         11716\nSession CoD Right Medium        11716\nSession IMA Accel High          11716\nSession Decel High              11716\nSession CoD Left High           11716\nSession CoD Right High          11716\nSession IMA Accel Total         11716\nSession IMA Decel Total         11716\nSession Jump Count Low Band     11716\nSession Jump Count Med Band     11716\nSession Jump Count High Band    11716\nSession Total Jump              11716\nSession Jumps Per Minute        11716\nTotal CoD Left                  11716\nTotal CoD Right                 11716\nTotal High IMA                  11716\nTotal IMA                       11716\nIMA/Min                         12461\nevent-uuid                          0\ngroup-uuid                          0\ndtype: int64\n\n\nNext, since there are a lot of N/A values for the columns describing the session as a whole, I’m going to fill in the values for the date so it looks better\n\nnan_columns = season1.iloc[:, 26:-2]\nnan_columns.columns\n\nIndex(['Session Total Jumps', 'Session Accel Low', 'Session Decel Low',\n       'Session CoD Left Low', 'Session CoD Right Low', 'Session Accel Med',\n       'Session Decel Medium', 'Session CoD Left Medium',\n       'Session CoD Right Medium', 'Session IMA Accel High',\n       'Session Decel High', 'Session CoD Left High', 'Session CoD Right High',\n       'Session IMA Accel Total', 'Session IMA Decel Total',\n       'Session Jump Count Low Band', 'Session Jump Count Med Band',\n       'Session Jump Count High Band', 'Session Total Jump',\n       'Session Jumps Per Minute', 'Total CoD Left', 'Total CoD Right',\n       'Total High IMA', 'Total IMA', 'IMA/Min'],\n      dtype='object')\n\n\n\ncolumn_fill = ['Session Total Jumps', 'Session Accel Low', 'Session Decel Low',\n       'Session CoD Left Low', 'Session CoD Right Low', 'Session Accel Med',\n       'Session Decel Medium', 'Session CoD Left Medium',\n       'Session CoD Right Medium', 'Session IMA Accel High',\n       'Session Decel High', 'Session CoD Left High', 'Session CoD Right High',\n       'Session IMA Accel Total', 'Session IMA Decel Total',\n       'Session Jump Count Low Band', 'Session Jump Count Med Band',\n       'Session Jump Count High Band', 'Session Total Jump',\n       'Session Jumps Per Minute', 'Total CoD Left', 'Total CoD Right',\n       'Total High IMA', 'Total IMA', 'IMA/Min']\nseason1[column_fill] = season1.groupby('About')[column_fill].ffill()\nseason1.head()\n\n\n\n\n\n\n\n\nDate\nAbout\nPosition\nPeriod Number\nPeriod\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\n...\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nevent-uuid\ngroup-uuid\n\n\n\n\n0\n3/14/2023\nAthlete I\nGuard\n1\n1. Pre Practice\n0\n87.437\n4.1\n3\n17\n...\n24.0\n95.0\n1.05\n269.0\n306.0\n89.0\n899.0\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n1\n3/14/2023\nAthlete I\nGuard\n2\n2. Drill_Offense_ Flare, Rescreen_Half Court_4v4\n0\n34.257\n8.2\n4\n4\n...\n24.0\n95.0\n1.05\n269.0\n306.0\n89.0\n899.0\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n2\n3/14/2023\nAthlete I\nGuard\n3\n3. Drill_Defense_PCM_Half Court_4v4\n0\n31.399\n9.9\n1\n4\n...\n24.0\n95.0\n1.05\n269.0\n306.0\n89.0\n899.0\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n3\n3/14/2023\nAthlete I\nGuard\n4\n4. Drill_Defense_Lane Width Slide_Full Court_1v1\n0\n13.616\n7.0\n1\n2\n...\n24.0\n95.0\n1.05\n269.0\n306.0\n89.0\n899.0\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n4\n3/14/2023\nAthlete I\nGuard\n5\n5. Drill_Defense_Fake Game_Half Court_2v2\n0\n28.724\n7.7\n2\n8\n...\n24.0\n95.0\n1.05\n269.0\n306.0\n89.0\n899.0\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n\n\n5 rows × 53 columns\n\n\n\n\nseason2[column_fill] = season2.groupby('About')[column_fill].ffill()\nseason2.head()\n\n\n\n\n\n\n\n\nDate\nAbout\nPosition\nPeriod Number\nPeriod\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\n...\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nevent-uuid\ngroup-uuid\n\n\n\n\n0\n3/13/2024\nAthlete E\nForward\n1\n1. Pre Practice\n0\n228.177\n4.9\n11\n36\n...\n23.0\n197.0\n1.75\n266.0\n281.0\n91.0\n957.0\n20.67\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n1\n3/13/2024\nAthlete E\nForward\n2\n2. Drill_Defense_Fake Game_Half Court_1v1\n0\n30.349\n7.4\n1\n3\n...\n23.0\n197.0\n1.75\n266.0\n281.0\n91.0\n957.0\n20.67\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n2\n3/13/2024\nAthlete E\nForward\n3\n3. Drill_Defense_Ball Screen Breakdown to Rebo...\n0\n27.615\n5.1\n3\n4\n...\n23.0\n197.0\n1.75\n266.0\n281.0\n91.0\n957.0\n20.67\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n3\n3/13/2024\nAthlete E\nForward\n4\n4. Play_Defense_Scramble_Half Court_5v5\n0\n61.841\n6.5\n11\n9\n...\n23.0\n197.0\n1.75\n266.0\n281.0\n91.0\n957.0\n20.67\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n4\n3/13/2024\nAthlete E\nForward\n5\n5. Play_Defense_Half Court D_Half Court_5vG\n0\n60.133\n5.3\n6\n7\n...\n23.0\n197.0\n1.75\n266.0\n281.0\n91.0\n957.0\n20.67\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n\n\n5 rows × 53 columns\n\n\n\nSince some of the numeric values ended up having a .0 at the end, we decided to remove that to make the look of the dataset cleaner\n\nround_col = ['Session Total Jumps', 'Session Accel Low', 'Session Decel Low',\n       'Session CoD Left Low', 'Session CoD Right Low', 'Session Accel Med',\n       'Session Decel Medium', 'Session CoD Left Medium',\n       'Session CoD Right Medium', 'Session IMA Accel High',\n       'Session Decel High', 'Session CoD Left High', 'Session CoD Right High',\n       'Session IMA Accel Total', 'Session IMA Decel Total',\n       'Session Jump Count Low Band', 'Session Jump Count Med Band',\n       'Session Jump Count High Band', 'Session Total Jump',\n       'Session Jumps Per Minute', 'Total CoD Left', 'Total CoD Right',\n       'Total High IMA', 'Total IMA']\nseason1[round_col] = season1[round_col].round(0).astype('Int64')\nseason2[round_col] = season2[round_col].round(0).astype('Int64')\n\nA lot of values also have three decimal places when they aren’t needed, so we will round them down to one, again, for polishing purposes\n\nseason1['Total Player Load'] = season1['Total Player Load'].round(1)\nseason2['Total Player Load'] = season2['Total Player Load'].round(1)\n\nNext, we just wanted to make sure the dates were all formatted correctly and the same between datasets\n\nseason1['Date'] = pd.to_datetime(season1['Date'], format='%m/%d/%y', errors='coerce')\nseason2['Date'] = pd.to_datetime(season2['Date'], format='%m/%d/%y', errors='coerce')\n\nseason1 = season1.sort_values('Date')\nseason2 = season2.sort_values('Date')\n\n# print a date to check\nprint(season1['Date'].head())\nprint(season2['Date'].head())\n\n0   NaT\n1   NaT\n2   NaT\n3   NaT\n4   NaT\nName: Date, dtype: datetime64[ns]\n0   NaT\n1   NaT\n2   NaT\n3   NaT\n4   NaT\nName: Date, dtype: datetime64[ns]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "3  EDA",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n\n3.0.0.1 Loading the Data\n\nseason1 = pd.read_csv('~/Downloads/DS2023/Final Project/catapult season 1(in).csv')\nseason2 = pd.read_csv('~/Downloads/DS2023/Final Project/catapult season 2(in).csv')\n\n\n\n3.0.0.2 Looking at the Entries\n\nseason1.head()\n\n\n\n\n\n\n\n\nDate\nAbout\nPosition\nPeriod Number\nPeriod\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\n...\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nevent-uuid\ngroup-uuid\n\n\n\n\n0\n3/14/2023\nAthlete I\nGuard\n1\n1. Pre Practice\n0\n87.437\n4.1\n3\n17\n...\n24.0\n95.0\n1.05\n269.0\n306.0\n89.0\n899.0\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n1\n3/14/2023\nAthlete I\nGuard\n2\n2. Drill_Offense_ Flare, Rescreen_Half Court_4v4\n0\n34.257\n8.2\n4\n4\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n2\n3/14/2023\nAthlete I\nGuard\n3\n3. Drill_Defense_PCM_Half Court_4v4\n0\n31.399\n9.9\n1\n4\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n3\n3/14/2023\nAthlete I\nGuard\n4\n4. Drill_Defense_Lane Width Slide_Full Court_1v1\n0\n13.616\n7.0\n1\n2\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n4\n3/14/2023\nAthlete I\nGuard\n5\n5. Drill_Defense_Fake Game_Half Court_2v2\n0\n28.724\n7.7\n2\n8\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n\n\n5 rows × 53 columns\n\n\n\n\nseason2.head()\n\n\n\n\n\n\n\n\nDate\nAbout\nPosition\nPeriod Number\nPeriod\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\n...\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nevent-uuid\ngroup-uuid\n\n\n\n\n0\n3/13/2024\nAthlete E\nForward\n1\n1. Pre Practice\n0\n228.177\n4.9\n11\n36\n...\n23.0\n197.0\n1.75\n266.0\n281.0\n91.0\n957.0\n20.67\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n1\n3/13/2024\nAthlete E\nForward\n2\n2. Drill_Defense_Fake Game_Half Court_1v1\n0\n30.349\n7.4\n1\n3\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n2\n3/13/2024\nAthlete E\nForward\n3\n3. Drill_Defense_Ball Screen Breakdown to Rebo...\n0\n27.615\n5.1\n3\n4\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n3\n3/13/2024\nAthlete E\nForward\n4\n4. Play_Defense_Scramble_Half Court_5v5\n0\n61.841\n6.5\n11\n9\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n4\n3/13/2024\nAthlete E\nForward\n5\n5. Play_Defense_Half Court D_Half Court_5vG\n0\n60.133\n5.3\n6\n7\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n\n\n5 rows × 53 columns\n\n\n\n\nprint(\"\\nShape of Season 1 Dataset:\", season1.shape)\nprint(\"\\nShape of Season 2 Dataset:\", season2.shape)\n\n\nShape of Season 1 Dataset: (16217, 53)\n\nShape of Season 2 Dataset: (13225, 53)\n\n\n\ndisplay(season1.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 16217 entries, 0 to 16216\nData columns (total 53 columns):\n #   Column                        Non-Null Count  Dtype  \n---  ------                        --------------  -----  \n 0   Date                          16217 non-null  object \n 1   About                         16217 non-null  object \n 2   Position                      16217 non-null  object \n 3   Period Number                 16217 non-null  int64  \n 4   Period                        16217 non-null  object \n 5   Total Acceleration Efforts    16217 non-null  int64  \n 6   Total Player Load             16217 non-null  float64\n 7   Player Load Per Minute        16217 non-null  float64\n 8   IMA Accel Low                 16217 non-null  int64  \n 9   IMA Decel Low                 16217 non-null  int64  \n 10  IMA CoD Left Low              16217 non-null  int64  \n 11  IMA CoD Right Low             16217 non-null  int64  \n 12  IMA Accel Medium              16217 non-null  int64  \n 13  IMA Decel Medium              16217 non-null  int64  \n 14  IMA CoD Left Medium           16217 non-null  int64  \n 15  IMA CoD Right Medium          16217 non-null  int64  \n 16  IMA Accel High                16217 non-null  int64  \n 17  IMA Decel High                16217 non-null  int64  \n 18  IMA Accel Total               16217 non-null  int64  \n 19  IMA Decel Total               16217 non-null  int64  \n 20  IMA CoD Left High             16217 non-null  int64  \n 21  IMA CoD Right High            16217 non-null  int64  \n 22  IMA Jump Count Low Band       16217 non-null  int64  \n 23  IMA Jump Count Med Band       16217 non-null  int64  \n 24  IMA Jump Count High Band      16217 non-null  int64  \n 25  Explosive Efforts             16217 non-null  int64  \n 26  Session Total Jumps           1726 non-null   float64\n 27  Session Accel Low             1726 non-null   float64\n 28  Session Decel Low             1726 non-null   float64\n 29  Session CoD Left Low          1726 non-null   float64\n 30  Session CoD Right Low         1726 non-null   float64\n 31  Session Accel Med             1726 non-null   float64\n 32  Session Decel Medium          1726 non-null   float64\n 33  Session CoD Left Medium       1726 non-null   float64\n 34  Session CoD Right Medium      1726 non-null   float64\n 35  Session IMA Accel High        1726 non-null   float64\n 36  Session Decel High            1726 non-null   float64\n 37  Session CoD Left High         1726 non-null   float64\n 38  Session CoD Right High        1726 non-null   float64\n 39  Session IMA Accel Total       1726 non-null   float64\n 40  Session IMA Decel Total       1726 non-null   float64\n 41  Session Jump Count Low Band   1726 non-null   float64\n 42  Session Jump Count Med Band   1726 non-null   float64\n 43  Session Jump Count High Band  1726 non-null   float64\n 44  Session Total Jump            1726 non-null   float64\n 45  Session Jumps Per Minute      1726 non-null   float64\n 46  Total CoD Left                1726 non-null   float64\n 47  Total CoD Right               1726 non-null   float64\n 48  Total High IMA                1726 non-null   float64\n 49  Total IMA                     1726 non-null   float64\n 50  IMA/Min                       147 non-null    float64\n 51  event-uuid                    16217 non-null  object \n 52  group-uuid                    16217 non-null  object \ndtypes: float64(27), int64(20), object(6)\nmemory usage: 6.6+ MB\n\n\nNone\n\n\n\ndisplay(season2.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 13225 entries, 0 to 13224\nData columns (total 53 columns):\n #   Column                        Non-Null Count  Dtype  \n---  ------                        --------------  -----  \n 0   Date                          13225 non-null  object \n 1   About                         13225 non-null  object \n 2   Position                      13225 non-null  object \n 3   Period Number                 13225 non-null  int64  \n 4   Period                        13225 non-null  object \n 5   Total Acceleration Efforts    13225 non-null  int64  \n 6   Total Player Load             13225 non-null  float64\n 7   Player Load Per Minute        13225 non-null  float64\n 8   IMA Accel Low                 13225 non-null  int64  \n 9   IMA Decel Low                 13225 non-null  int64  \n 10  IMA CoD Left Low              13225 non-null  int64  \n 11  IMA CoD Right Low             13225 non-null  int64  \n 12  IMA Accel Medium              13225 non-null  int64  \n 13  IMA Decel Medium              13225 non-null  int64  \n 14  IMA CoD Left Medium           13225 non-null  int64  \n 15  IMA CoD Right Medium          13225 non-null  int64  \n 16  IMA Accel High                13225 non-null  int64  \n 17  IMA Decel High                13225 non-null  int64  \n 18  IMA Accel Total               13225 non-null  int64  \n 19  IMA Decel Total               13225 non-null  int64  \n 20  IMA CoD Left High             13225 non-null  int64  \n 21  IMA CoD Right High            13225 non-null  int64  \n 22  IMA Jump Count Low Band       13225 non-null  int64  \n 23  IMA Jump Count Med Band       13225 non-null  int64  \n 24  IMA Jump Count High Band      13225 non-null  int64  \n 25  Explosive Efforts             13225 non-null  int64  \n 26  Session Total Jumps           1509 non-null   float64\n 27  Session Accel Low             1509 non-null   float64\n 28  Session Decel Low             1509 non-null   float64\n 29  Session CoD Left Low          1509 non-null   float64\n 30  Session CoD Right Low         1509 non-null   float64\n 31  Session Accel Med             1509 non-null   float64\n 32  Session Decel Medium          1509 non-null   float64\n 33  Session CoD Left Medium       1509 non-null   float64\n 34  Session CoD Right Medium      1509 non-null   float64\n 35  Session IMA Accel High        1509 non-null   float64\n 36  Session Decel High            1509 non-null   float64\n 37  Session CoD Left High         1509 non-null   float64\n 38  Session CoD Right High        1509 non-null   float64\n 39  Session IMA Accel Total       1509 non-null   float64\n 40  Session IMA Decel Total       1509 non-null   float64\n 41  Session Jump Count Low Band   1509 non-null   float64\n 42  Session Jump Count Med Band   1509 non-null   float64\n 43  Session Jump Count High Band  1509 non-null   float64\n 44  Session Total Jump            1509 non-null   float64\n 45  Session Jumps Per Minute      1509 non-null   float64\n 46  Total CoD Left                1509 non-null   float64\n 47  Total CoD Right               1509 non-null   float64\n 48  Total High IMA                1509 non-null   float64\n 49  Total IMA                     1509 non-null   float64\n 50  IMA/Min                       764 non-null    float64\n 51  event-uuid                    13225 non-null  object \n 52  group-uuid                    13225 non-null  object \ndtypes: float64(27), int64(20), object(6)\nmemory usage: 5.3+ MB\n\n\nNone\n\n\nAs we can see, the datasets have both categorical variables (objects) and numerical variables (floats and integers). Let’s split them up.\nFor Season 1 Data:\n\ncategorical_vars1 = season1.select_dtypes(include=['object']).columns.tolist()\nnumerical_vars1 = season1.select_dtypes(include=['float64', 'int64']).columns.tolist()\nprint(\"\\nCategorical variables:\\n\", \"\\n\".join(categorical_vars1), \"\\n\")\nprint(\"Numerical variables:\\n\", \"\\n\".join(numerical_vars1))\n\n\nCategorical variables:\n Date\nAbout\nPosition\nPeriod\nevent-uuid\ngroup-uuid \n\nNumerical variables:\n Period Number\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\nIMA CoD Left Low\nIMA CoD Right Low\nIMA Accel Medium\nIMA Decel Medium\nIMA CoD Left Medium\nIMA CoD Right Medium\nIMA Accel High\nIMA Decel High\nIMA Accel Total\nIMA Decel Total\nIMA CoD Left High\nIMA CoD Right High\nIMA Jump Count Low Band\nIMA Jump Count Med Band\nIMA Jump Count High Band\nExplosive Efforts\nSession Total Jumps\nSession Accel Low\nSession Decel Low\nSession CoD Left Low\nSession CoD Right Low\nSession Accel Med\nSession Decel Medium\nSession CoD Left Medium\nSession CoD Right Medium\nSession IMA Accel High\nSession Decel High\nSession CoD Left High\nSession CoD Right High\nSession IMA Accel Total\nSession IMA Decel Total\nSession Jump Count Low Band\nSession Jump Count Med Band\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\n\n\nFor Season 2 Data:\n\ncategorical_vars2 = season2.select_dtypes(include=['object']).columns.tolist()\nnumerical_vars2 = season2.select_dtypes(include=['float64', 'int64']).columns.tolist()\nprint(\"\\nCategorical variables:\\n\", \"\\n\".join(categorical_vars2), \"\\n\")\nprint(\"Numerical variables:\\n\", \"\\n\".join(numerical_vars2))\n\n\nCategorical variables:\n Date\nAbout\nPosition\nPeriod\nevent-uuid\ngroup-uuid \n\nNumerical variables:\n Period Number\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\nIMA CoD Left Low\nIMA CoD Right Low\nIMA Accel Medium\nIMA Decel Medium\nIMA CoD Left Medium\nIMA CoD Right Medium\nIMA Accel High\nIMA Decel High\nIMA Accel Total\nIMA Decel Total\nIMA CoD Left High\nIMA CoD Right High\nIMA Jump Count Low Band\nIMA Jump Count Med Band\nIMA Jump Count High Band\nExplosive Efforts\nSession Total Jumps\nSession Accel Low\nSession Decel Low\nSession CoD Left Low\nSession CoD Right Low\nSession Accel Med\nSession Decel Medium\nSession CoD Left Medium\nSession CoD Right Medium\nSession IMA Accel High\nSession Decel High\nSession CoD Left High\nSession CoD Right High\nSession IMA Accel Total\nSession IMA Decel Total\nSession Jump Count Low Band\nSession Jump Count Med Band\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\n\n\nThe variables in the two datasets are the same, so we can just use the variables list from either season.\n\ncategorical_vars = categorical_vars1\nnumerical_vars = numerical_vars1\n\nNow we want to look at the numerical data values from the two datasets separately and look at their summary statistics.\n\ndisplay(season1[numerical_vars].describe())\ndisplay(season2[numerical_vars].describe())\n\n\n\n\n\n\n\n\nPeriod Number\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\nIMA CoD Left Low\nIMA CoD Right Low\nIMA Accel Medium\nIMA Decel Medium\n...\nSession Jump Count Low Band\nSession Jump Count Med Band\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\n\n\n\n\ncount\n16217.000000\n16217.0\n16217.000000\n16217.000000\n16217.000000\n16217.000000\n16217.000000\n16217.000000\n16217.000000\n16217.000000\n...\n1726.000000\n1726.000000\n1726.000000\n1726.000000\n1726.000000\n1726.000000\n1726.000000\n1726.000000\n1726.000000\n147.000000\n\n\nmean\n6.652525\n0.0\n52.337503\n5.353524\n5.315410\n9.208485\n17.555035\n20.235124\n1.626256\n3.093729\n...\n33.809386\n64.951912\n20.362109\n119.123407\n1.375788\n215.965817\n254.534183\n79.506373\n797.713789\n41.853878\n\n\nstd\n4.141737\n0.0\n62.855369\n2.563189\n7.468177\n12.190242\n20.894417\n24.756947\n2.802535\n4.343362\n...\n22.720919\n48.318095\n11.982516\n65.438466\n0.575178\n104.759111\n116.961422\n37.981273\n337.515498\n44.259464\n\n\nmin\n1.000000\n0.0\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n25%\n3.000000\n0.0\n17.363000\n3.800000\n1.000000\n2.000000\n4.000000\n5.000000\n0.000000\n0.000000\n...\n19.000000\n33.000000\n12.000000\n77.000000\n0.970000\n151.000000\n183.000000\n54.000000\n598.250000\n15.385000\n\n\n50%\n6.000000\n0.0\n31.677000\n5.000000\n3.000000\n6.000000\n12.000000\n13.000000\n1.000000\n2.000000\n...\n30.000000\n53.000000\n19.000000\n109.000000\n1.320000\n215.000000\n256.000000\n79.000000\n808.000000\n28.700000\n\n\n75%\n10.000000\n0.0\n58.495000\n6.500000\n7.000000\n11.000000\n23.000000\n26.000000\n2.000000\n4.000000\n...\n44.000000\n80.000000\n26.000000\n148.000000\n1.690000\n278.000000\n325.000000\n104.000000\n1012.500000\n44.740000\n\n\nmax\n18.000000\n0.0\n534.156000\n19.700000\n88.000000\n223.000000\n209.000000\n242.000000\n45.000000\n65.000000\n...\n167.000000\n364.000000\n103.000000\n402.000000\n6.260000\n604.000000\n653.000000\n221.000000\n2021.000000\n250.600000\n\n\n\n\n8 rows × 47 columns\n\n\n\n\n\n\n\n\n\n\nPeriod Number\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\nIMA CoD Left Low\nIMA CoD Right Low\nIMA Accel Medium\nIMA Decel Medium\n...\nSession Jump Count Low Band\nSession Jump Count Med Band\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\n\n\n\n\ncount\n13225.000000\n13225.0\n13225.000000\n13225.000000\n13225.000000\n13225.000000\n13225.000000\n13225.000000\n13225.000000\n13225.000000\n...\n1509.000000\n1509.000000\n1509.000000\n1509.000000\n1509.000000\n1509.000000\n1509.000000\n1509.000000\n1509.000000\n764.000000\n\n\nmean\n5.973535\n0.0\n61.454804\n5.717913\n7.135047\n10.103743\n22.557580\n24.349716\n2.152439\n3.344650\n...\n34.560636\n69.612989\n23.708416\n127.882041\n1.429536\n251.767396\n279.864148\n82.794566\n886.871438\n48.234673\n\n\nstd\n3.740189\n0.0\n60.880537\n2.370601\n8.330654\n11.443480\n23.209367\n24.814249\n3.045018\n4.180073\n...\n20.534756\n43.015003\n14.527384\n54.551116\n0.566100\n104.614130\n106.778251\n36.076329\n315.604251\n53.959041\n\n\nmin\n1.000000\n0.0\n0.008000\n0.100000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.100000\n\n\n25%\n3.000000\n0.0\n22.557000\n4.200000\n2.000000\n3.000000\n8.000000\n8.000000\n0.000000\n1.000000\n...\n20.000000\n40.000000\n14.000000\n90.000000\n1.050000\n187.000000\n213.000000\n59.000000\n686.000000\n21.925000\n\n\n50%\n5.000000\n0.0\n40.545000\n5.500000\n5.000000\n7.000000\n16.000000\n18.000000\n1.000000\n2.000000\n...\n31.000000\n59.000000\n22.000000\n119.000000\n1.380000\n253.000000\n288.000000\n81.000000\n911.000000\n31.610000\n\n\n75%\n9.000000\n0.0\n76.709000\n6.900000\n9.000000\n13.000000\n30.000000\n32.000000\n3.000000\n4.000000\n...\n45.000000\n89.000000\n31.000000\n158.000000\n1.770000\n315.000000\n353.000000\n106.000000\n1089.000000\n42.552500\n\n\nmax\n18.000000\n0.0\n532.129000\n17.400000\n110.000000\n151.000000\n252.000000\n302.000000\n43.000000\n48.000000\n...\n181.000000\n272.000000\n96.000000\n355.000000\n6.460000\n602.000000\n627.000000\n459.000000\n1877.000000\n310.430000\n\n\n\n\n8 rows × 47 columns\n\n\n\nNow we are creating two sets of dataframes to store the win/loss results for game dates and for practice (before and after games) dates separately. We’re doing this so we can see whether there are win/loss trends based on player load before, during, and after the game separately. Since we played one extra game in 2022-2023 season (we got further in the ACC championships), we will leave out the outstanding game so that each season has data for the same number of games (in this case, 31).\n\n\n3.0.0.3 Data Frames for Games\n\ngames_season1 = [\n    '11/07/2022', '11/11/2022', '11/18/2022', '11/20/2022',\n    '11/25/2022', '11/29/2022', '12/03/2022', '12/06/2022', '12/17/2022',\n    '12/20/2022', '12/28/2022', '12/31/2022', '01/03/2023', '01/07/2023',\n    '01/10/2023', '01/14/2023', '01/18/2023', '01/21/2023', '01/28/2023',\n    '01/30/2023', '02/04/2023', '02/07/2023', '02/11/2023', '02/15/2023',\n    '02/18/2023', '02/22/2023', '02/25/2023', '02/28/2023', '03/04/2023',\n    '03/09/2023', '03/10/2023'\n]\n\nresults_season1 = [\n    'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'L', 'L', 'W', 'W', 'L', 'W', 'W',\n    'W', 'W', 'W', 'W', 'W', 'L', 'W', 'W', 'W', 'W', 'L', 'L', 'W', 'W', 'W', 'W'\n]\n\ngames_dates1 = pd.to_datetime(games_season1, format='%m/%d/%Y')\n\ndf1 = pd.DataFrame({\n    'Date': games_dates1,\n    'Result': results_season1\n})\n\ndf1['Win'] = df1['Result'].map({'W': 1, 'L': 0})\ndf1['Season'] = '2022–23'\n\n\ndf1.head()\n\n\n\n\n\n\n\n\nDate\nResult\nWin\nSeason\n\n\n\n\n0\n2022-11-07\nW\n1\n2022–23\n\n\n1\n2022-11-11\nW\n1\n2022–23\n\n\n2\n2022-11-18\nW\n1\n2022–23\n\n\n3\n2022-11-20\nW\n1\n2022–23\n\n\n4\n2022-11-25\nW\n1\n2022–23\n\n\n\n\n\n\n\n\ngames_season2 = [\n    '11/06/2023', '11/10/2023', '11/14/2023', '11/16/2023', '11/20/2023',\n    '11/22/2023', '11/29/2023', '12/02/2024', '12/05/2023', '12/16/2023',\n    '12/19/2023', '12/27/2023', '12/30/2023', '01/03/2024', '01/06/2024',\n    '01/13/2024', '01/17/2024', '01/20/2024', '01/24/2024', '01/27/2024',\n    '01/31/2024', '02/03/2024', '02/05/2024', '02/10/2024', '02/13/2024',\n    '02/17/2024', '02/19/2024', '02/24/2024', '02/28/2024', '03/02/2024',\n    '03/09/2024'\n]\n\nresults_season2 = [\n    'W', 'W', 'W', 'W', 'L', 'W', 'W', 'W', 'W', 'W', 'L', 'W', 'L', 'W', 'L', 'L', 'W', 'W', 'W', 'W',\n    'W', 'W', 'W', 'W', 'L', 'W', 'L', 'L', 'W', 'L', 'W'\n]\n\ngames_dates2 = pd.to_datetime(games_season2, format='%m/%d/%Y')\n\ndf2 = pd.DataFrame({\n    'Date': games_dates2,\n    'Result': results_season2\n})\n\ndf2['Win'] = df2['Result'].map({'W': 1, 'L': 0})\ndf2['Season'] = '2023–24'\n\n\ndf2.head()\n\n\n\n\n\n\n\n\nDate\nResult\nWin\nSeason\n\n\n\n\n0\n2023-11-06\nW\n1\n2023–24\n\n\n1\n2023-11-10\nW\n1\n2023–24\n\n\n2\n2023-11-14\nW\n1\n2023–24\n\n\n3\n2023-11-16\nW\n1\n2023–24\n\n\n4\n2023-11-20\nL\n0\n2023–24\n\n\n\n\n\n\n\n\n\n3.0.0.4 Finding Win Proportions By Season\n\ndf1['Win'].value_counts(normalize=True)\n\nWin\n1    0.806452\n0    0.193548\nName: proportion, dtype: float64\n\n\n\ndf2['Win'].value_counts(normalize=True)\n\nWin\n1    0.709677\n0    0.290323\nName: proportion, dtype: float64\n\n\n\n\n3.0.0.5 Data Frames for Practice (Before Games)\n\nseason1['Date'] = pd.to_datetime(season1['Date']).dt.normalize()\nseason2['Date'] = pd.to_datetime(season2['Date']).dt.normalize()\n\n\nbefore_games_season1 = [\n    '11/06/2022', '11/10/2022', '11/13/2022', '11/17/2022', '11/19/2022',\n    '11/24/2022', '11/28/2022', '12/04/2022', '12/05/2022', '12/16/2022',\n    '12/19/2022', '12/27/2022', '12/30/2022', '01/02/2023', '01/06/2023',\n    '01/09/2023', '01/13/2023', '01/17/2023', '01/20/2023', '01/27/2023',\n    '01/29/2023', '02/03/2023', '02/06/2023', '02/10/2023', '02/14/2023',\n    '02/17/2023', '02/21/2023', '02/24/2023', '02/27/2023', '03/03/2023']\n\nbefore_games_season2 = [\n    '11/05/2023', '11/09/2023', '11/13/2023', '11/15/2023', '11/19/2023',\n    '11/21/2023', '11/28/2023', '12/01/2024', '12/04/2023', '12/15/2023',\n    '12/18/2023', '12/26/2023', '12/29/2023', '01/02/2024', '01/05/2024',\n    '01/12/2024', '01/16/2024', '01/19/2024', '01/23/2024', '01/26/2024',\n    '01/30/2024', '02/02/2024', '02/06/2024', '02/09/2024', '02/12/2024',\n    '02/16/2024', '02/18/2024', '02/23/2024', '02/27/2024', '03/01/2024',\n    '03/08/2024']\n\nbefore_games_dates1 = pd.to_datetime(before_games_season1).normalize()\nbefore_games_dates2 = pd.to_datetime(before_games_season2).normalize()\n\nbefore_games1 = season1[season1['Date'].isin(before_games_dates1)]\nbefore_games2 = season2[season2['Date'].isin(before_games_dates2)]\n\n\n\n3.0.0.6 Data Frames for Practice (After Games)\n\nafter_games_season1 = [\n    '11/08/2022', '11/12/2022', '11/15/2022', '11/19/2022', '11/21/2022',\n    '11/26/2022', '11/30/2022', '12/04/2022', '12/07/2022', '12/18/2022',\n    '12/21/2022', '12/29/2022', '01/01/2022', '01/04/2023', '01/08/2023',\n    '01/11/2023', '01/15/2023', '01/19/2023', '01/22/2023', '01/29/2023',\n    '01/31/2023', '02/05/2023', '02/08/2023', '02/12/2023', '02/16/2023',\n    '02/19/2023', '02/23/2023', '02/26/2023', '03/01/2023', '03/05/2023']\n\nafter_games_season2 = [\n    '11/07/2023', '11/11/2023', '11/15/2023', '11/17/2023', '11/21/2023',\n    '11/23/2023', '11/30/2023', '12/03/2024', '12/06/2023', '12/17/2023',\n    '12/20/2023', '12/28/2023', '12/31/2023', '01/04/2024', '01/07/2024',\n    '01/14/2024', '01/18/2024', '01/21/2024', '01/25/2024', '01/28/2024',\n    '02/01/2024', '02/04/2024', '02/06/2024', '02/11/2024', '02/14/2024',\n    '02/18/2024', '02/20/2024', '02/25/2024', '02/29/2024', '03/03/2024',\n    '03/10/2024']\n\nafter_games_dates1 = pd.to_datetime(after_games_season1).normalize()\nafter_games_dates2 = pd.to_datetime(after_games_season2).normalize()\n\nafter_games1 = season1[season1['Date'].isin(after_games_dates1)]\nafter_games2 = season2[season2['Date'].isin(after_games_dates2)]\n\n\n\n3.0.0.7 Cumulative Wins Graph\nFirst, with our in-game dataframe, we can create a visual of the wins (cumulatively) we have each season by game number. By doing so, we can look for any trends in how the seasons progress e.g. strong starts, mid-season slumps, momentum building toward playoffs, etc.\n\ndf1['Cumulative Wins'] = df1['Win'].cumsum()\ndf2['Cumulative Wins'] = df2['Win'].cumsum()\n\ndf1['Game #'] = range(1, len(df2) + 1)\ndf2['Game #'] = range(1, len(df1) + 1)\n\nplt.figure(figsize=(10, 6))\nplt.plot(df1['Game #'], df1['Cumulative Wins'], label='2022–23', marker='o', color='blue')\nplt.plot(df2['Game #'], df2['Cumulative Wins'], label='2023–24', marker='o', color='green')\nplt.title('Cumulative Wins by Game #')\nplt.xlabel('Game Number')\nplt.ylabel('Cumulative Wins')\nplt.legend()\nsns.despine()\nplt.show()\n\n\n\n\n\n\n\n\nThe two seasons seemm pretty similar in that the slopes of the two graphs are similar. It shows there’s not much difference in the momentum of specific time periods within each season.\n\n\n3.0.0.8 Correlation Heatmaps for Key Metrics\nNow, we want to understand the relationships between the key metrics: total player load, player load per minute, IMA accel total, IMA decel total, and explosive efforts, so we plot correlation heatmaps for those metrics for each season. We are most interested in seeing if there’s a correlation between total player load and explosive efforts.\n\nkey_metrics1 = season1[['Total Player Load', 'Player Load Per Minute', 'IMA Accel Total',\n                   'IMA Decel Total', 'Explosive Efforts']]\n\nkey_metrics2 = season2[['Total Player Load', 'Player Load Per Minute', 'IMA Accel Total',\n                   'IMA Decel Total', 'Explosive Efforts']]\n\n\nplt.figure(figsize=(12, 6))\nsns.heatmap(key_metrics1.corr(), annot=True, cmap='coolwarm', center=0)\nplt.xlabel(\"Metrics\")\nplt.ylabel(\"Metrics\")\nplt.title(\"Correlation Heatmap of Season 1 Key Metrics\", pad=20, fontsize=16)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.figure(figsize=(12, 6))\nsns.heatmap(key_metrics2.corr(), annot=True, cmap='coolwarm', center=0)\nplt.xlabel(\"Metrics\")\nplt.ylabel(\"Metrics\")\nplt.title(\"Correlation Heatmap of Season 2 Key Metrics\", pad=20, fontsize=16)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFor both seasons, the correlation between total player load and explosive efforts is about 0.7-0.8, which is quite strong! Let’s proceed with exploring more about this relation by graphing scatterplots and seeing if there are any other patterns.\n\n\n3.0.0.9 Total Player Load vs Explosive Efforts Scatterplots\n\nplt.figure(figsize=(12, 6))\nsns.scatterplot(data=season1, x=\"Total Player Load\", y=\"Explosive Efforts\", color='blue')\nsns.regplot(data=season1, x=\"Total Player Load\", y=\"Explosive Efforts\", scatter=False, color='red', line_kws={\"linestyle\":\"dashed\"})\n\nplt.title(\"Total Player Load vs Explosive Efforts (2022-2023 Season Data)\")\nplt.xlabel(\"Total Player Load\")\nplt.ylabel(\"# of Explosive Efforts\")\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.figure(figsize=(12, 6))\nsns.scatterplot(data=season2, x=\"Total Player Load\", y=\"Explosive Efforts\", color='red')\nsns.regplot(data=season2, x=\"Total Player Load\", y=\"Explosive Efforts\", scatter=False, color='blue', line_kws={\"linestyle\":\"dashed\"})\n\nplt.title(\"Total Player Load vs Explosive Efforts (2023-2024 Season Data)\")\nplt.xlabel(\"Total Player Load\")\nplt.ylabel(\"# of Explosive Efforts\")\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n3.0.0.10 Explosive Efforts Heatmap\nHere, we are exploring how explosive efforts by itself changed over each of the two seasons.\n\nseason1['Season'] = 1\nseason2['Season'] = 2\nseasons_combined = pd.concat([season1, season2])\n\nseasons_combined['Date'] = pd.to_datetime(seasons_combined['Date'], format='%m/%d/%Y', errors='coerce')\nseasons_combined['Week'] = seasons_combined['Date'].dt.isocalendar().week\n\nweekly_stats = seasons_combined.groupby(['Season', 'Week'])[['Explosive Efforts', 'Player Load Per Minute']].mean().reset_index()\npivot_seasons = weekly_stats.pivot(index='Week', columns='Season', values='Explosive Efforts')\n\nprint(seasons_combined.columns)\n\nplt.figure(figsize=(10, 6))\nsns.heatmap(pivot_seasons, annot=True, cmap='coolwarm', fmt=\".1f\")\nplt.title(\"Avg Explosive Efforts per Week by Season\")\nplt.xlabel(\"Season\")\nplt.ylabel(\"Week Number\")\nplt.show()\n\nIndex(['Date', 'About', 'Position', 'Period Number', 'Period',\n       'Total Acceleration Efforts', 'Total Player Load',\n       'Player Load Per Minute', 'IMA Accel Low', 'IMA Decel Low',\n       'IMA CoD Left Low', 'IMA CoD Right Low', 'IMA Accel Medium',\n       'IMA Decel Medium', 'IMA CoD Left Medium', 'IMA CoD Right Medium',\n       'IMA Accel High', 'IMA Decel High', 'IMA Accel Total',\n       'IMA Decel Total', 'IMA CoD Left High', 'IMA CoD Right High',\n       'IMA Jump Count Low Band', 'IMA Jump Count Med Band',\n       'IMA Jump Count High Band', 'Explosive Efforts', 'Session Total Jumps',\n       'Session Accel Low', 'Session Decel Low', 'Session CoD Left Low',\n       'Session CoD Right Low', 'Session Accel Med', 'Session Decel Medium',\n       'Session CoD Left Medium', 'Session CoD Right Medium',\n       'Session IMA Accel High', 'Session Decel High', 'Session CoD Left High',\n       'Session CoD Right High', 'Session IMA Accel Total',\n       'Session IMA Decel Total', 'Session Jump Count Low Band',\n       'Session Jump Count Med Band', 'Session Jump Count High Band',\n       'Session Total Jump', 'Session Jumps Per Minute', 'Total CoD Left',\n       'Total CoD Right', 'Total High IMA', 'Total IMA', 'IMA/Min',\n       'event-uuid', 'group-uuid', 'Season', 'Week'],\n      dtype='object')\n\n\n\n\n\n\n\n\n\nLooking at the heatmap for both seasons, it’s interesting to see that the explosive efforts in the 2023-2024 season are consistently higher than the efforts in the 2022-2023 season. However, both seasons seem to have a similar trend where the explosive efforts dip somewhere in the middle of the season, and then increase back up towards the end. The difference is that in the 2022-2023 season, the dip is around week 11 and in 2023-2024 season the dip looks to be a little later in week 20. We also see less noticeable changes in explosive efforts throughout the season in comparison to the 2022-2023 season.\n\n\n3.0.0.11 Metrics vs Game Outcome Graphs (by each season)\nNow, let’s analyze IMA accel total alongside the two variables above and compare all three metrics by game outcome (win/loss):\n\ngames1 = season1[season1['Date'].isin(games_dates1)]\ngames1 = pd.merge(games1, df1[['Date', 'Result', 'Win']], on='Date', how='left')\n\n\ngames2 = season2[season2['Date'].isin(games_dates2)]\ngames2 = pd.merge(games2, df2[['Date', 'Result', 'Win']], on='Date', how='left')\n\n\ngames1.groupby('Result')[['Total Player Load', 'IMA Accel Total', 'Explosive Efforts']].mean().plot(kind='bar')\nplt.title('Average Metrics by Game Outcome for 2022-2023 Season')\nplt.ylabel('Average Value')\nplt.xticks(rotation=0)\nplt.show()\n\n\n\n\n\n\n\n\n\ngames2.groupby('Result')[['Total Player Load', 'IMA Accel Total', 'Explosive Efforts']].mean().plot(kind='bar')\nplt.title('Average Metrics by Game Outcome for 2023-2024 Season')\nplt.ylabel('Average Value')\nplt.xticks(rotation=0)\nplt.show()\n\n\n\n\n\n\n\n\nThis is interesting, because it seems like the average values for all three metrics were unanimously lower during games we won compared to games we lost. Why is this? It is because they are in better shape and/or have better technique and thus don’t have to exert as much energy to do well?\n\n\n3.0.0.12 Total Player Load Box Plot Graphs\nJust to look at it clearer, let’s create visualizations of just total player load in wins and losses.\n\nsns.boxplot(data=games1, x='Win', y='Total Player Load')\nplt.xticks([0, 1], ['Loss', 'Win'])\nplt.title('Total Player Load in Wins vs Losses')\nplt.show()\n\n\n\n\n\n\n\n\n\nsns.boxplot(data=games2, x='Win', y='Total Player Load')\nplt.xticks([0, 1], ['Loss', 'Win'])\nplt.title('Total Player Load in Wins vs Losses')\nplt.show()\n\n\n\n\n\n\n\n\nYes, we’ve comfirmed that the total player load is consistently lower during wins than losses for both seasons.\n\n\n3.0.0.13 Position Analysis Graph\nNow, we would like to analyze the data by player position to see if this trend still exists and if there are variations there.\n\nforward1 = season1[season1['Position'] == 'Forward']\ncenter1 = season1[season1['Position'] == 'Guard']\nguard1 = season1[season1['Position'] == 'Center']\n\n\nforward2 = games2[games2['Position'] == 'Forward']\ncenter2 = games2[games2['Position'] == 'Guard']\nguard2 = games2[games2['Position'] == 'Center']\n\n\nload_by_position = games1.groupby(['Position', 'Win'])['Total Player Load'].mean().reset_index()\nplt.figure(figsize=(10, 6))\nsns.barplot(data=load_by_position, x='Position', y='Total Player Load', hue='Win')\nplt.title('Average Player Load by Position in Wins vs Losses for the 2022-2023 Season')\nplt.ylabel('Avg Total Player Load')\nplt.xlabel(None)\nplt.tight_layout()\nsns.despine()\nplt.show()\n\n\n\n\n\n\n\n\n\nload_by_position = games2.groupby(['Position', 'Win'])['Total Player Load'].mean().reset_index()\nplt.figure(figsize=(10, 6))\nsns.barplot(data=load_by_position, x='Position', y='Total Player Load', hue='Win')\nplt.title('Average Player Load by Position in Wins vs Losses for the 2023-2024 Season')\nplt.ylabel('Avg Total Player Load')\nplt.xlabel(None)\nplt.tight_layout()\nsns.despine()\nplt.show()\n\n\n\n\n\n\n\n\nIt seems like, on average (except for centers in the 2023-2024 season), the total player load for is higher when a game is lost compared to when it is won, which corresponds to our earlier findings above before we separated by position, which still gave us that same pattern.\n\n\n3.0.0.14 Player Load by Position and Game Result Across Seasons\nUsing the same variables as above, let’s visualize our data slightly differently (different colors now represent different seasons instead of win or loss) to see if we can find any other trends that we didn’t see previously.\n\ngames1['Season'] = '2022–23'\ngames2['Season'] = '2023–24'\ncombined = pd.concat([games1, games2])\navg_load = combined.groupby(['Season', 'Position', 'Win'])['Total Player Load'].mean().reset_index()\navg_load['Result'] = avg_load['Win'].map({1: 'Win', 0: 'Loss'})\navg_load['Group'] = avg_load['Position'] + ' - ' + avg_load['Result']\nplt.figure(figsize=(14, 6))\nsns.barplot(data=avg_load, x='Group', y='Total Player Load', hue='Season', palette='Set2')\nplt.title('Player Load by Position and Game Result Across Seasons')\nplt.ylabel('Avg Total Player Load')\nplt.xlabel('Position and Game Result')\nplt.xticks(rotation=0)\nplt.legend(title='Season')\nplt.tight_layout()\nsns.despine()\nplt.show()\n\n\n\n\n\n\n\n\nThere is no discernable pattern. Although, it is intriguing that forwards and guards have a decently higher player load for both wins and losses in the 2022-23 season, but centers have a lower player load for both wins and losses that season. This seems like the complete opposite of the other two positions, and there doesn’t seem to be a reason, at least based on the responsibilities of a center, for this phenomenon. Perhaps this could be something the coaches look into to figure out the reason why.\n\n\n3.0.0.15 Player Load by Position Between Seasons (Different Hues = Win/Loss)\n\ncombined.columns = combined.columns.str.strip()\n\ncombined['Result Label'] = combined['Win'].map({1: 'Win', 0: 'Loss'})\n\ng = sns.catplot(\n    data=combined,\n    x='Position',\n    y='Total Player Load',\n    hue='Result Label',\n    col='Season',\n    kind='bar',\n    errorbar=None,\n    estimator='mean',\n    palette={'Win':'#fe5a03', 'Loss': '#130ccc'},\n    height=6,\n    aspect=1\n)\n\ng.set(xlabel=None)\ng._legend.remove()\ng.set_titles(\"{col_name}\")\n\n\nplt.suptitle(\"Avg. Player Load by Position Between Seasons\", fontsize=16, x= 0.23 , y=1.09)\nplt.text(\n    0.19, 1.01,\n    \"Organized by if the game resulted in a \",\n    fontsize=14,\n    ha='center',\n    transform=plt.gcf().transFigure\n)\n\nplt.text(\n    0.353, 1.01,\n    \"Win\",\n    fontsize=14,\n    color='#fe5a03',\n    weight='bold',\n    ha='center',\n    transform=plt.gcf().transFigure\n)\n\nplt.text(\n    0.38, 1.01,\n    \" or \",\n    fontsize=14,\n    ha='center',\n    transform=plt.gcf().transFigure\n)\n\nplt.text(\n    0.41, 1.01,\n    \"Loss\",\n    fontsize=14,\n    color='#130ccc',\n    weight='bold',\n    ha='center',\n    transform=plt.gcf().transFigure\n)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n3.0.0.16 Drills Analysis\nNow, let’s look at the ‘drills’ periods during practice to see how player load affects the players during these periods specifically. We will make a new dataframe that only consists of the entries that are recorded during drill periods.\n\ndrills1 = season1[season1['Period'].str.contains('5v5', na=False)]\ndrills1.head()\n\n\n\n\n\n\n\n\nDate\nAbout\nPosition\nPeriod Number\nPeriod\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\n...\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nevent-uuid\ngroup-uuid\nSeason\n\n\n\n\n2521\n2023-02-16\nAthlete A\nCenter\n5\n5. Play_Developmental Score Stop_Full Court_5v5\n0\n45.935\n6.1\n6\n9\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n9779245e-91a5-40fb-b073-471453cfdb13\n9779245e-91a5-40fb-b073-471453cfdb13\n1\n\n\n2526\n2023-02-16\nAthlete E\nForward\n5\n5. Play_Developmental Score Stop_Full Court_5v5\n0\n51.630\n6.8\n6\n9\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n9ca807f2-93bb-4bb8-8db5-4b3791649441\n0771d534-3631-49f3-9ea3-48e0fe558310\n1\n\n\n2532\n2023-02-16\nAthlete B\nGuard\n5\n5. Play_Developmental Score Stop_Full Court_5v5\n0\n64.536\n8.5\n9\n20\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\naa675d53-6f1d-4c17-b02f-06cb8e9acaa2\ne97bf2cb-2a76-4d7e-a307-c90d0bfc2f8c\n1\n\n\n2538\n2023-02-16\nAthlete L\nForward\n5\n5. Play_Developmental Score Stop_Full Court_5v5\n0\n66.499\n8.8\n5\n17\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n6907572a-2d47-4419-bea1-34b26c411bba\nf47b6fc1-fe86-4a34-87ca-af253ece69a4\n1\n\n\n2543\n2023-02-16\nAthlete K\nForward\n5\n5. Play_Developmental Score Stop_Full Court_5v5\n0\n54.009\n7.1\n7\n18\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\ncb25cbc3-ab5e-418c-9d25-338ac2aa81d1\ncb25cbc3-ab5e-418c-9d25-338ac2aa81d1\n1\n\n\n\n\n5 rows × 54 columns\n\n\n\n\ndrills1.describe()\n\n\n\n\n\n\n\n\nDate\nPeriod Number\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\nIMA CoD Left Low\nIMA CoD Right Low\nIMA Accel Medium\n...\nSession Jump Count Med Band\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nSeason\n\n\n\n\ncount\n1434\n1434.000000\n1434.0\n1434.000000\n1434.000000\n1434.000000\n1434.000000\n1434.000000\n1434.000000\n1434.000000\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1434.0\n\n\nmean\n2022-10-30 03:12:48.200837120\n9.023710\n0.0\n63.907629\n5.658926\n7.209205\n11.800558\n27.597629\n30.804045\n2.111576\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1.0\n\n\nmin\n2022-10-05 00:00:00\n3.000000\n0.0\n0.147000\n0.300000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1.0\n\n\n25%\n2022-10-13 00:00:00\n7.000000\n0.0\n34.172250\n4.200000\n3.000000\n5.000000\n14.000000\n15.000000\n1.000000\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1.0\n\n\n50%\n2022-10-22 00:00:00\n9.000000\n0.0\n53.572000\n5.200000\n6.000000\n10.000000\n22.000000\n26.000000\n2.000000\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1.0\n\n\n75%\n2022-11-02 00:00:00\n11.000000\n0.0\n76.502250\n6.700000\n10.000000\n16.000000\n36.000000\n40.000000\n3.000000\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1.0\n\n\nmax\n2023-02-16 00:00:00\n15.000000\n0.0\n318.293000\n15.600000\n44.000000\n71.000000\n155.000000\n177.000000\n17.000000\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1.0\n\n\nstd\nNaN\n2.820174\n0.0\n46.366240\n2.263789\n6.313359\n9.504065\n21.210552\n23.436927\n2.204821\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\n\n\n\n\n8 rows × 49 columns\n\n\n\n\ndrills2 = season2[season2['Period'].str.contains('5v5', na=False)]\ndrills2.head()\n\n\n\n\n\n\n\n\nDate\nAbout\nPosition\nPeriod Number\nPeriod\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\n...\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nevent-uuid\ngroup-uuid\nSeason\n\n\n\n\n2\n2024-03-13\nAthlete E\nForward\n3\n3. Drill_Defense_Ball Screen Breakdown to Rebo...\n0\n27.615\n5.1\n3\n4\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n2\n\n\n3\n2024-03-13\nAthlete E\nForward\n4\n4. Play_Defense_Scramble_Half Court_5v5\n0\n61.841\n6.5\n11\n9\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n2\n\n\n10\n2024-03-13\nAthlete O\nForward\n3\n3. Drill_Defense_Ball Screen Breakdown to Rebo...\n0\n29.773\n5.5\n10\n16\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n18e8a460-4632-41b6-a9cb-99d3bd371a18\nb475b268-92f7-4838-9c3f-7b2ce4071ba2\n2\n\n\n11\n2024-03-13\nAthlete O\nForward\n4\n4. Play_Defense_Scramble_Half Court_5v5\n0\n64.199\n6.8\n6\n15\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n18e8a460-4632-41b6-a9cb-99d3bd371a18\nb475b268-92f7-4838-9c3f-7b2ce4071ba2\n2\n\n\n18\n2024-03-13\nAthlete Q\nForward\n3\n3. Drill_Defense_Ball Screen Breakdown to Rebo...\n0\n29.392\n5.5\n8\n5\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n70756cd3-91b8-4d57-bb9e-cd71d351c496\n21cd07b6-e6f0-483f-af2c-571598c447de\n2\n\n\n\n\n5 rows × 54 columns\n\n\n\n\ndrills2.describe()\n\n\n\n\n\n\n\n\nDate\nPeriod Number\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\nIMA CoD Left Low\nIMA CoD Right Low\nIMA Accel Medium\n...\nSession Jump Count Med Band\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nSeason\n\n\n\n\ncount\n1843\n1843.000000\n1843.0\n1843.000000\n1843.000000\n1843.000000\n1843.000000\n1843.000000\n1843.000000\n1843.000000\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1843.0\n\n\nmean\n2023-12-01 05:54:43.559413760\n7.778079\n0.0\n65.508577\n6.114921\n8.858926\n10.822572\n30.172545\n32.356484\n2.830711\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2.0\n\n\nmin\n2023-10-05 00:00:00\n2.000000\n0.0\n1.573000\n0.300000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2.0\n\n\n25%\n2023-10-17 00:00:00\n6.000000\n0.0\n39.336000\n4.900000\n4.000000\n6.000000\n17.000000\n19.000000\n1.000000\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2.0\n\n\n50%\n2023-11-13 00:00:00\n8.000000\n0.0\n58.510000\n6.000000\n8.000000\n10.000000\n27.000000\n29.000000\n2.000000\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2.0\n\n\n75%\n2024-01-15 00:00:00\n10.000000\n0.0\n86.042500\n7.200000\n12.000000\n14.000000\n40.000000\n43.000000\n4.000000\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2.0\n\n\nmax\n2024-03-13 00:00:00\n14.000000\n0.0\n267.552000\n16.100000\n45.000000\n47.000000\n128.000000\n131.000000\n32.000000\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2.0\n\n\nstd\nNaN\n2.385515\n0.0\n37.906144\n2.036560\n6.566594\n7.154833\n18.881928\n19.449631\n2.746351\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\n\n\n\n\n8 rows × 49 columns\n\n\n\n\ndrills1_5vG = season1[season1['Period'].str.contains('5vG', na=False)]\ndrills1_5vG.head()\n\n\n\n\n\n\n\n\nDate\nAbout\nPosition\nPeriod Number\nPeriod\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\n...\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nevent-uuid\ngroup-uuid\nSeason\n\n\n\n\n5\n2023-03-14\nAthlete I\nGuard\n6\n6. Play_Defense_Post Trap_Half Court_5vG\n0\n22.720\n5.3\n2\n1\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n1\n\n\n7\n2023-03-14\nAthlete I\nGuard\n8\n8. Play_Offense_Rebound to Set_Full Court_5vG\n0\n60.011\n6.7\n3\n14\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n1\n\n\n8\n2023-03-14\nAthlete I\nGuard\n9\n9. Play_O to D_Full Court_5vG\n0\n74.211\n7.9\n10\n7\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n1\n\n\n10\n2023-03-14\nAthlete I\nGuard\n11\n11. Instructional_Offense_Sets_Half Court_5vG\n0\n21.855\n4.7\n1\n1\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n1\n\n\n19\n2023-03-14\nAthlete G\nForward\n6\n6. Play_Defense_Post Trap_Half Court_5vG\n0\n24.440\n5.7\n2\n3\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0f3c779a-edac-41d5-a625-f9a78a669628\n0f3c779a-edac-41d5-a625-f9a78a669628\n1\n\n\n\n\n5 rows × 54 columns\n\n\n\n\ndrills2_5vG = season2[season2['Period'].str.contains('5vG', na=False)]\ndrills2_5vG.head()\n\n\n\n\n\n\n\n\nDate\nAbout\nPosition\nPeriod Number\nPeriod\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\n...\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nevent-uuid\ngroup-uuid\nSeason\n\n\n\n\n4\n2024-03-13\nAthlete E\nForward\n5\n5. Play_Defense_Half Court D_Half Court_5vG\n0\n60.133\n5.3\n6\n7\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n2\n\n\n5\n2024-03-13\nAthlete E\nForward\n6\n6. Play_Offense_Half Court O_Half Court_5vG\n0\n77.313\n5.9\n8\n6\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n2\n\n\n6\n2024-03-13\nAthlete E\nForward\n7\n7. Play_O to D_Full Court_5vG\n0\n80.173\n6.2\n8\n14\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n2\n\n\n12\n2024-03-13\nAthlete O\nForward\n5\n5. Play_Defense_Half Court D_Half Court_5vG\n0\n65.968\n5.8\n12\n13\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n18e8a460-4632-41b6-a9cb-99d3bd371a18\nb475b268-92f7-4838-9c3f-7b2ce4071ba2\n2\n\n\n13\n2024-03-13\nAthlete O\nForward\n6\n6. Play_Offense_Half Court O_Half Court_5vG\n0\n81.574\n6.2\n8\n20\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n18e8a460-4632-41b6-a9cb-99d3bd371a18\nb475b268-92f7-4838-9c3f-7b2ce4071ba2\n2\n\n\n\n\n5 rows × 54 columns\n\n\n\n\ndrills1_5vG.describe()\n\n\n\n\n\n\n\n\nDate\nPeriod Number\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\nIMA CoD Left Low\nIMA CoD Right Low\nIMA Accel Medium\n...\nSession Jump Count Med Band\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nSeason\n\n\n\n\ncount\n4879\n4879.000000\n4879.0\n4879.000000\n4879.000000\n4879.000000\n4879.000000\n4879.000000\n4879.000000\n4879.000000\n...\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n1.0\n0.0\n4879.0\n\n\nmean\n2022-12-26 10:59:20.893625856\n7.932568\n0.0\n39.076363\n4.711867\n4.371183\n7.481861\n17.426727\n19.561590\n1.377946\n...\n29.0\n21.0\n73.0\n0.8\n215.0\n211.0\n71.0\n665.0\nNaN\n1.0\n\n\nmin\n2022-10-05 00:00:00\n1.000000\n0.0\n0.574000\n0.200000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n29.0\n21.0\n73.0\n0.8\n215.0\n211.0\n71.0\n665.0\nNaN\n1.0\n\n\n25%\n2022-11-16 00:00:00\n5.000000\n0.0\n19.348500\n3.500000\n1.000000\n3.000000\n7.000000\n8.000000\n0.000000\n...\n29.0\n21.0\n73.0\n0.8\n215.0\n211.0\n71.0\n665.0\nNaN\n1.0\n\n\n50%\n2022-12-19 00:00:00\n8.000000\n0.0\n34.526000\n4.700000\n3.000000\n6.000000\n15.000000\n17.000000\n1.000000\n...\n29.0\n21.0\n73.0\n0.8\n215.0\n211.0\n71.0\n665.0\nNaN\n1.0\n\n\n75%\n2023-02-06 00:00:00\n10.000000\n0.0\n52.859000\n5.900000\n6.000000\n11.000000\n25.000000\n28.000000\n2.000000\n...\n29.0\n21.0\n73.0\n0.8\n215.0\n211.0\n71.0\n665.0\nNaN\n1.0\n\n\nmax\n2023-03-14 00:00:00\n16.000000\n0.0\n246.643000\n13.100000\n40.000000\n58.000000\n155.000000\n146.000000\n12.000000\n...\n29.0\n21.0\n73.0\n0.8\n215.0\n211.0\n71.0\n665.0\nNaN\n1.0\n\n\nstd\nNaN\n3.138749\n0.0\n26.925823\n1.834039\n4.172107\n6.340550\n14.026519\n15.258758\n1.580106\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\n\n\n\n\n8 rows × 49 columns\n\n\n\n\ndrills2_5vG.describe()\n\n\n\n\n\n\n\n\nDate\nPeriod Number\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\nIMA CoD Left Low\nIMA CoD Right Low\nIMA Accel Medium\n...\nSession Jump Count Med Band\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nSeason\n\n\n\n\ncount\n4061\n4061.000000\n4061.0\n4061.000000\n4061.000000\n4061.000000\n4061.00000\n4061.000000\n4061.000000\n4061.000000\n...\n1.0\n1.0\n1.0\n1.00\n1.0\n1.0\n1.0\n1.0\n0.0\n4061.0\n\n\nmean\n2023-12-20 20:27:14.671263488\n7.809160\n0.0\n45.931008\n5.057843\n5.828614\n7.40852\n20.699581\n22.009604\n1.887712\n...\n3.0\n1.0\n5.0\n0.32\n15.0\n20.0\n7.0\n63.0\nNaN\n2.0\n\n\nmin\n2023-10-05 00:00:00\n1.000000\n0.0\n0.248000\n0.300000\n0.000000\n0.00000\n0.000000\n0.000000\n0.000000\n...\n3.0\n1.0\n5.0\n0.32\n15.0\n20.0\n7.0\n63.0\nNaN\n2.0\n\n\n25%\n2023-11-15 00:00:00\n6.000000\n0.0\n23.933000\n3.800000\n2.000000\n3.00000\n9.000000\n10.000000\n0.000000\n...\n3.0\n1.0\n5.0\n0.32\n15.0\n20.0\n7.0\n63.0\nNaN\n2.0\n\n\n50%\n2023-12-12 00:00:00\n8.000000\n0.0\n40.927000\n4.900000\n5.000000\n6.00000\n18.000000\n19.000000\n1.000000\n...\n3.0\n1.0\n5.0\n0.32\n15.0\n20.0\n7.0\n63.0\nNaN\n2.0\n\n\n75%\n2024-01-30 00:00:00\n10.000000\n0.0\n61.936000\n6.100000\n8.000000\n10.00000\n29.000000\n31.000000\n3.000000\n...\n3.0\n1.0\n5.0\n0.32\n15.0\n20.0\n7.0\n63.0\nNaN\n2.0\n\n\nmax\n2024-03-13 00:00:00\n16.000000\n0.0\n199.811000\n14.600000\n45.000000\n40.00000\n117.000000\n117.000000\n19.000000\n...\n3.0\n1.0\n5.0\n0.32\n15.0\n20.0\n7.0\n63.0\nNaN\n2.0\n\n\nstd\nNaN\n3.196022\n0.0\n29.105327\n1.994243\n5.370617\n5.61541\n15.453422\n15.671541\n2.241063\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\n\n\n\n\n8 rows × 49 columns\n\n\n\n\n\n\n3.0.0.17 Before VS During VS After Games Analysis\nThen, let’s look at the differences between the dataframes for before, during, and after games.\n\nbefore_games1.describe()\n\n\n\n\n\n\n\n\nDate\nPeriod Number\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\nIMA CoD Left Low\nIMA CoD Right Low\nIMA Accel Medium\n...\nSession Jump Count Low Band\nSession Jump Count Med Band\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\n\n\n\n\ncount\n5247\n5247.000000\n5247.0\n5247.000000\n5247.000000\n5247.000000\n5247.000000\n5247.000000\n5247.000000\n5247.000000\n...\n403.000000\n403.000000\n403.000000\n403.000000\n403.000000\n403.000000\n403.000000\n403.000000\n403.000000\n30.0000\n\n\nmean\n2023-01-07 07:00:26.758147328\n7.215171\n0.0\n34.267581\n4.867067\n3.471126\n6.427864\n12.277682\n13.918239\n1.003621\n...\n34.111663\n67.411911\n17.062035\n118.585608\n1.222457\n209.111663\n241.295285\n71.225806\n763.528536\n49.7290\n\n\nmin\n2022-11-06 00:00:00\n1.000000\n0.0\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n2.000000\n1.000000\n0.000000\n10.000000\n0.120000\n47.000000\n50.000000\n6.000000\n152.000000\n13.0200\n\n\n25%\n2022-12-04 00:00:00\n4.000000\n0.0\n13.459500\n3.400000\n1.000000\n1.000000\n3.000000\n3.000000\n0.000000\n...\n21.000000\n34.000000\n11.000000\n77.500000\n0.835000\n166.000000\n199.500000\n54.000000\n640.000000\n19.9500\n\n\n50%\n2023-01-13 00:00:00\n7.000000\n0.0\n23.984000\n4.700000\n2.000000\n4.000000\n9.000000\n10.000000\n0.000000\n...\n29.000000\n52.000000\n16.000000\n104.000000\n1.150000\n207.000000\n242.000000\n69.000000\n755.000000\n24.8250\n\n\n75%\n2023-02-10 00:00:00\n10.000000\n0.0\n43.929500\n6.100000\n5.000000\n9.000000\n18.000000\n21.000000\n2.000000\n...\n42.000000\n83.500000\n22.000000\n141.500000\n1.495000\n248.500000\n279.000000\n85.500000\n871.000000\n39.5050\n\n\nmax\n2023-03-03 00:00:00\n17.000000\n0.0\n369.276000\n15.300000\n55.000000\n134.000000\n153.000000\n177.000000\n17.000000\n...\n151.000000\n317.000000\n75.000000\n392.000000\n4.180000\n466.000000\n496.000000\n173.000000\n1601.000000\n194.0500\n\n\nstd\nNaN\n4.024375\n0.0\n34.036406\n2.241183\n4.136477\n8.172190\n12.444099\n13.779982\n1.454674\n...\n18.950444\n52.079102\n9.599369\n62.172961\n0.537024\n63.884690\n66.306537\n26.033295\n201.113804\n54.8223\n\n\n\n\n8 rows × 48 columns\n\n\n\n\ngames1.describe()\n\n\n\n\n\n\n\n\nDate\nPeriod Number\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\nIMA CoD Left Low\nIMA CoD Right Low\nIMA Accel Medium\n...\nSession Jump Count Med Band\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nWin\n\n\n\n\ncount\n1237\n1237.000000\n1237.0\n1237.000000\n1237.000000\n1237.000000\n1237.000000\n1237.000000\n1237.000000\n1237.000000\n...\n490.000000\n490.000000\n490.000000\n490.00000\n490.000000\n490.000000\n490.000000\n490.000000\n53.000000\n1237.000000\n\n\nmean\n2023-01-11 03:29:32.352465664\n2.046888\n0.0\n191.102104\n9.803961\n19.654002\n27.689572\n49.520614\n63.136621\n6.803557\n...\n42.222449\n18.718367\n84.236735\n1.61000\n161.634694\n211.255102\n69.185714\n640.791837\n25.180000\n0.835893\n\n\nmin\n2022-11-07 00:00:00\n1.000000\n0.0\n0.155000\n0.200000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n0.000000\n0.000000\n0.000000\n0.00000\n0.000000\n0.000000\n0.000000\n0.000000\n6.640000\n0.000000\n\n\n25%\n2022-12-06 00:00:00\n1.000000\n0.0\n108.197000\n7.200000\n7.000000\n11.000000\n14.000000\n20.000000\n2.000000\n...\n26.000000\n12.000000\n52.000000\n1.29000\n59.500000\n80.000000\n30.000000\n272.500000\n10.840000\n1.000000\n\n\n50%\n2023-01-14 00:00:00\n2.000000\n0.0\n178.837000\n9.100000\n16.000000\n22.000000\n33.000000\n44.000000\n5.000000\n...\n42.000000\n18.000000\n86.000000\n1.55000\n167.500000\n215.000000\n73.000000\n658.000000\n14.310000\n1.000000\n\n\n75%\n2023-02-11 00:00:00\n3.000000\n0.0\n274.924000\n12.400000\n31.000000\n39.000000\n80.000000\n102.000000\n10.000000\n...\n55.000000\n25.000000\n112.000000\n1.85750\n233.000000\n304.000000\n101.000000\n926.000000\n38.640000\n1.000000\n\n\nmax\n2023-03-10 00:00:00\n5.000000\n0.0\n534.156000\n19.700000\n88.000000\n223.000000\n209.000000\n242.000000\n45.000000\n...\n222.000000\n74.000000\n253.000000\n6.26000\n477.000000\n552.000000\n162.000000\n1439.000000\n157.050000\n1.000000\n\n\nstd\nNaN\n1.037828\n0.0\n112.341658\n3.138493\n15.162814\n23.503783\n42.295355\n51.285844\n6.300413\n...\n24.650554\n9.446993\n39.727923\n0.56997\n100.416328\n132.497290\n40.189991\n355.361807\n25.249313\n0.370522\n\n\n\n\n8 rows × 49 columns\n\n\n\n\nafter_games1.describe()\n\n\n\n\n\n\n\n\nDate\nPeriod Number\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\nIMA CoD Left Low\nIMA CoD Right Low\nIMA Accel Medium\n...\nSession Jump Count Low Band\nSession Jump Count Med Band\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\n\n\n\n\ncount\n1656\n1656.000000\n1656.0\n1656.000000\n1656.000000\n1656.000000\n1656.000000\n1656.000000\n1656.000000\n1656.000000\n...\n173.000000\n173.000000\n173.000000\n173.000000\n173.000000\n173.000000\n173.000000\n173.000000\n173.000000\n13.000000\n\n\nmean\n2022-12-29 16:17:23.478260992\n5.914855\n0.0\n40.830259\n4.944988\n3.958937\n7.578502\n14.082126\n15.592995\n1.155193\n...\n28.462428\n60.520231\n17.312139\n106.294798\n1.239017\n175.924855\n199.000000\n63.248555\n647.687861\n45.287692\n\n\nmin\n2022-11-12 00:00:00\n1.000000\n0.0\n0.454000\n0.300000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n0.000000\n3.000000\n0.000000\n10.000000\n0.120000\n25.000000\n39.000000\n6.000000\n123.000000\n14.790000\n\n\n25%\n2022-11-19 00:00:00\n3.000000\n0.0\n15.708000\n3.500000\n1.000000\n2.000000\n3.000000\n4.000000\n0.000000\n...\n17.000000\n24.000000\n8.000000\n60.000000\n0.860000\n108.000000\n134.000000\n36.000000\n456.000000\n19.320000\n\n\n50%\n2022-12-29 00:00:00\n5.000000\n0.0\n27.859500\n4.700000\n2.000000\n5.000000\n9.000000\n11.000000\n1.000000\n...\n26.000000\n44.000000\n13.000000\n90.000000\n1.140000\n163.000000\n183.000000\n57.000000\n611.000000\n26.060000\n\n\n75%\n2023-01-29 00:00:00\n8.000000\n0.0\n48.926000\n6.100000\n5.000000\n9.000000\n19.000000\n21.000000\n2.000000\n...\n35.000000\n82.000000\n23.000000\n143.000000\n1.530000\n227.000000\n254.000000\n85.000000\n839.000000\n45.070000\n\n\nmax\n2023-02-26 00:00:00\n18.000000\n0.0\n407.034000\n13.100000\n42.000000\n93.000000\n146.000000\n191.000000\n17.000000\n...\n138.000000\n364.000000\n88.000000\n402.000000\n3.190000\n504.000000\n513.000000\n174.000000\n1464.000000\n157.180000\n\n\nstd\nNaN\n3.808798\n0.0\n43.940751\n2.239796\n5.216938\n10.184337\n17.169896\n18.750415\n1.830113\n...\n18.845610\n52.829430\n14.051224\n65.373967\n0.589885\n87.939594\n91.312968\n34.952652\n278.277876\n42.512342\n\n\n\n\n8 rows × 48 columns\n\n\n\n\nbefore_games2.describe()\n\n\n\n\n\n\n\n\nDate\nPeriod Number\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\nIMA CoD Left Low\nIMA CoD Right Low\nIMA Accel Medium\n...\nSession Jump Count Low Band\nSession Jump Count Med Band\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\n\n\n\n\ncount\n3904\n3904.000000\n3904.0\n3904.000000\n3904.000000\n3904.000000\n3904.000000\n3904.000000\n3904.000000\n3904.000000\n...\n360.000000\n360.000000\n360.000000\n360.000000\n360.000000\n360.000000\n360.000000\n360.000000\n360.000000\n212.000000\n\n\nmean\n2024-01-02 17:48:56.065573888\n6.244621\n0.0\n45.689530\n5.117341\n5.233863\n7.709785\n17.881148\n19.099898\n1.591957\n...\n32.358333\n62.583333\n21.327778\n116.269444\n1.177611\n246.102778\n269.133333\n76.311111\n842.847222\n30.932594\n\n\nmin\n2023-11-05 00:00:00\n1.000000\n0.0\n0.650000\n0.200000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.100000\n\n\n25%\n2023-11-28 00:00:00\n3.000000\n0.0\n18.854250\n3.800000\n1.000000\n2.000000\n6.000000\n7.000000\n0.000000\n...\n19.000000\n37.000000\n13.000000\n86.000000\n0.860000\n193.750000\n221.000000\n57.750000\n697.750000\n26.227500\n\n\n50%\n2024-01-05 00:00:00\n6.000000\n0.0\n33.196500\n5.000000\n4.000000\n5.000000\n14.000000\n16.000000\n1.000000\n...\n28.000000\n55.000000\n20.000000\n112.000000\n1.110000\n239.000000\n275.000000\n75.000000\n857.500000\n29.995000\n\n\n75%\n2024-02-02 00:00:00\n9.000000\n0.0\n56.762500\n6.200000\n7.000000\n10.000000\n25.000000\n27.000000\n2.000000\n...\n42.000000\n77.250000\n29.000000\n139.000000\n1.432500\n297.250000\n322.000000\n93.250000\n971.000000\n36.112500\n\n\nmax\n2024-03-08 00:00:00\n16.000000\n0.0\n531.556000\n16.600000\n73.000000\n105.000000\n243.000000\n302.000000\n27.000000\n...\n123.000000\n246.000000\n74.000000\n330.000000\n3.700000\n553.000000\n603.000000\n199.000000\n1857.000000\n74.500000\n\n\nstd\nNaN\n3.581395\n0.0\n41.716933\n2.036798\n5.705729\n8.961302\n16.163595\n17.059143\n2.101997\n...\n18.388622\n38.400234\n13.227948\n46.289956\n0.467010\n85.834705\n82.889691\n28.578834\n240.270151\n9.562441\n\n\n\n\n8 rows × 48 columns\n\n\n\n\ngames2.describe()\n\n\n\n\n\n\n\n\nDate\nPeriod Number\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\nIMA CoD Left Low\nIMA CoD Right Low\nIMA Accel Medium\n...\nSession Jump Count Med Band\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nWin\n\n\n\n\ncount\n1214\n1214.000000\n1214.0\n1214.000000\n1214.000000\n1214.000000\n1214.000000\n1214.000000\n1214.000000\n1214.000000\n...\n372.000000\n372.000000\n372.000000\n372.000000\n372.000000\n372.000000\n372.000000\n372.000000\n239.000000\n1214.000000\n\n\nmean\n2024-01-09 17:22:38.154860032\n2.383855\n0.0\n156.026671\n8.782455\n17.460461\n23.617792\n50.194399\n55.362438\n5.311367\n...\n46.290323\n25.043011\n102.580645\n1.753495\n207.088710\n236.580645\n74.728495\n746.868280\n83.630460\n0.721582\n\n\nmin\n2023-11-06 00:00:00\n1.000000\n0.0\n0.251000\n0.300000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n1.000000\n1.000000\n0.200000\n0.000000\n\n\n25%\n2023-12-05 00:00:00\n1.000000\n0.0\n65.072750\n6.600000\n6.000000\n9.000000\n15.000000\n18.000000\n1.000000\n...\n33.000000\n16.000000\n78.000000\n1.440000\n134.750000\n161.000000\n47.000000\n528.750000\n17.115000\n0.000000\n\n\n50%\n2024-01-17 00:00:00\n2.000000\n0.0\n152.017500\n8.400000\n14.000000\n20.500000\n38.000000\n40.500000\n4.000000\n...\n46.000000\n23.000000\n101.000000\n1.750000\n211.500000\n235.500000\n72.500000\n759.000000\n36.360000\n1.000000\n\n\n75%\n2024-02-13 00:00:00\n3.000000\n0.0\n214.778500\n10.800000\n26.000000\n34.000000\n79.000000\n88.000000\n8.000000\n...\n58.000000\n30.250000\n123.000000\n2.050000\n277.000000\n316.000000\n97.000000\n980.750000\n149.700000\n1.000000\n\n\nmax\n2024-03-09 00:00:00\n5.000000\n0.0\n532.129000\n17.100000\n110.000000\n139.000000\n252.000000\n227.000000\n43.000000\n...\n133.000000\n82.000000\n196.000000\n4.190000\n503.000000\n512.000000\n176.000000\n1503.000000\n310.430000\n1.000000\n\n\nstd\nNaN\n1.221248\n0.0\n99.787114\n2.712880\n14.930275\n18.326944\n43.467266\n46.899100\n5.683483\n...\n19.964567\n15.298407\n33.104367\n0.481858\n98.278581\n107.656043\n35.508838\n308.000676\n83.158187\n0.448405\n\n\n\n\n8 rows × 49 columns\n\n\n\n\nafter_games2.describe()\n\n\n\n\n\n\n\n\nDate\nPeriod Number\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\nIMA CoD Left Low\nIMA CoD Right Low\nIMA Accel Medium\n...\nSession Jump Count Low Band\nSession Jump Count Med Band\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\n\n\n\n\ncount\n1188\n1188.000000\n1188.0\n1188.000000\n1188.000000\n1188.000000\n1188.000000\n1188.000000\n1188.000000\n1188.000000\n...\n161.000000\n161.000000\n161.000000\n161.000000\n161.000000\n161.000000\n161.000000\n161.000000\n161.000000\n105.000000\n\n\nmean\n2024-01-04 04:25:27.272727296\n4.651515\n0.0\n53.672207\n4.864562\n5.786195\n9.361111\n19.295455\n20.585859\n1.648990\n...\n26.391304\n68.397516\n18.385093\n113.173913\n1.367516\n177.416149\n195.248447\n55.124224\n649.204969\n20.121619\n\n\nmin\n2023-11-15 00:00:00\n1.000000\n0.0\n0.008000\n0.100000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n1.000000\n1.000000\n2.000000\n0.990000\n\n\n25%\n2023-11-30 00:00:00\n2.000000\n0.0\n20.518000\n3.600000\n1.000000\n2.000000\n6.000000\n6.750000\n0.000000\n...\n12.000000\n37.000000\n6.000000\n72.000000\n0.890000\n112.000000\n120.000000\n31.000000\n430.000000\n11.710000\n\n\n50%\n2024-01-04 00:00:00\n4.000000\n0.0\n34.739500\n4.800000\n3.000000\n6.000000\n14.000000\n15.000000\n1.000000\n...\n20.000000\n60.000000\n14.000000\n105.000000\n1.290000\n154.000000\n179.000000\n48.000000\n580.000000\n17.530000\n\n\n75%\n2024-02-01 00:00:00\n6.000000\n0.0\n63.870000\n6.000000\n8.000000\n11.000000\n27.000000\n28.000000\n2.000000\n...\n36.000000\n88.000000\n26.000000\n142.000000\n1.800000\n233.000000\n264.000000\n74.000000\n830.000000\n25.020000\n\n\nmax\n2024-02-29 00:00:00\n15.000000\n0.0\n373.392000\n17.300000\n76.000000\n151.000000\n178.000000\n159.000000\n32.000000\n...\n145.000000\n233.000000\n74.000000\n304.000000\n2.950000\n448.000000\n468.000000\n157.000000\n1440.000000\n85.070000\n\n\nstd\nNaN\n2.852411\n0.0\n54.724179\n1.996496\n7.431898\n12.548879\n19.589625\n20.962723\n2.645055\n...\n21.793684\n45.543013\n15.254533\n58.336799\n0.606598\n89.739314\n93.757135\n32.016745\n287.034539\n12.224504\n\n\n\n\n8 rows × 48 columns\n\n\n\n\n\n3.0.0.18 Correlation Graph Between Total Player Load and Performance\nFrom above, we see that for both seasons on average, the total player load was highest during the games and lowest right before the games. But is there a more specific game-by-game correlation between this relationship and team’s performance?\n\nplt.figure(figsize=(12, 6))\n\nsns.lineplot(data=before_games1, x='Date', y='Total Player Load', label='Before Games')\nsns.lineplot(data=after_games1, x='Date', y='Total Player Load', label='After Games')\n\nplt.title('Total Player Load Before vs. After Games (Season 1)\\n', fontsize=16, fontweight='bold')\nplt.xlabel('Date', fontsize=12)\nplt.ylabel('Total Player Load', fontsize=12)\nplt.legend(title='Period')\n\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.figure(figsize=(12, 6))\n\nsns.lineplot(data=before_games2, x='Date', y='Total Player Load', label='Before Games')\nsns.lineplot(data=after_games2, x='Date', y='Total Player Load', label='After Games')\n\nplt.title('Total Player Load Before vs. After Games (Season 2)\\n', fontsize=16, fontweight='bold')\nplt.xlabel('Date', fontsize=12)\nplt.ylabel('Total Player Load', fontsize=12)\nplt.legend(title='Period')\n\nplt.show()\n\n\n\n\n\n\n\n\nThere seems to be a general trend across both seasons where during the first half of the season, the total player load before and after games stay pretty similar. However, as the season goes on, we see that the total player load after games start to become significantly higher than the load before gameis building up for the players, which would lead them to physically exert themselves more during games to maintain their previous competitive performance. Additionally, there is an increase in intensity of conference play towards the end of the season and also more frequent game substitutions due to injuries that would cause players to be more tired. On the flip side, player loads before games might have been intentionally reduced in order to maximize recovery and conserve energy as the team gets closer to the postseason.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>EDA</span>"
    ]
  },
  {
    "objectID": "dataviz.html",
    "href": "dataviz.html",
    "title": "4  Data Viz",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nseason2 = pd.read_csv('~/Downloads/DS2023/Final Project/catapult season 2(in).csv')\nseason2.head()\n\n\n\n\n\n\n\n\nDate\nAbout\nPosition\nPeriod Number\nPeriod\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\n...\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nevent-uuid\ngroup-uuid\n\n\n\n\n0\n3/13/2024\nAthlete E\nForward\n1\n1. Pre Practice\n0\n228.177\n4.9\n11\n36\n...\n23.0\n197.0\n1.75\n266.0\n281.0\n91.0\n957.0\n20.67\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n1\n3/13/2024\nAthlete E\nForward\n2\n2. Drill_Defense_Fake Game_Half Court_1v1\n0\n30.349\n7.4\n1\n3\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n2\n3/13/2024\nAthlete E\nForward\n3\n3. Drill_Defense_Ball Screen Breakdown to Rebo...\n0\n27.615\n5.1\n3\n4\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n3\n3/13/2024\nAthlete E\nForward\n4\n4. Play_Defense_Scramble_Half Court_5v5\n0\n61.841\n6.5\n11\n9\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n4\n3/13/2024\nAthlete E\nForward\n5\n5. Play_Defense_Half Court D_Half Court_5vG\n0\n60.133\n5.3\n6\n7\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n\n\n5 rows × 53 columns\n\n\n\n\nseason1 = pd.read_csv('~/Downloads/DS2023/Final Project/catapult season 1(in).csv')\n\n\ngames_23_24 = [\n    '11/06/2023', '11/10/2023', '11/14/2023', '11/16/2023', '11/20/2023',\n    '11/22/2023', '11/29/2023', '12/02/2024', '12/05/2023', '12/16/2023',\n    '12/19/2023', '12/27/2023', '12/30/2023', '01/03/2024', '01/06/2024',\n    '01/13/2024', '01/17/2024', '01/20/2024', '01/24/2024', '01/27/2024',\n    '01/31/2024', '02/03/2024', '02/05/2024', '02/10/2024', '02/13/2024',\n    '02/17/2024', '02/19/2024', '02/24/2024', '02/28/2024', '03/02/2024', \n    '03/09/2024'\n]\n\nresults_23_24 = [\n    'W', 'W', 'W', 'W', 'L', 'W', 'W', 'W', 'W', 'W', 'L', 'W', 'L', 'W', 'L', 'L', 'W', 'W', 'W', 'W', \n    'W', 'W', 'W', 'W', 'L', 'W', 'L', 'L', 'W', 'L', 'W'\n]\n\ndf2 = pd.DataFrame({\n    'Date': pd.to_datetime(games_23_24),\n    'Result': results_23_24\n})\n\ndf2['Win'] = df2['Result'].map({'W': 1, 'L': 0})\ndf2['Season'] = '2023–24'\n\n\ngames_22_23 = [\n    '11/07/2022', '11/11/2022', '11/18/2022', '11/20/2022',\n    '11/25/2022', '11/29/2022', '12/03/2022', '12/06/2022', '12/17/2022',\n    '12/20/2022', '12/28/2022', '12/31/2022', '01/03/2023', '01/07/2023',\n    '01/10/2023', '01/14/2023', '01/18/2023', '01/21/2023', '01/28/2023',\n    '01/30/2023', '02/04/2023', '02/07/2023', '02/11/2023', '02/15/2023',\n    '02/18/2023', '02/22/2023', '02/25/2023', '02/28/2023', '03/04/2023', \n    '03/09/2023', '03/10/2023'\n]\n\n#the last game of the ACC playoffs is left out so each season has data for 31 games\n\nresults_22_23 = [\n    'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'L', 'L', 'W', 'W', 'L', 'W', 'W',\n    'W', 'W', 'W', 'W', 'W', 'L', 'W', 'W', 'W', 'W', 'L', 'L', 'W', 'W', 'W', 'W'\n]\n\ndf1 = pd.DataFrame({\n    'Date': pd.to_datetime(games_22_23),\n    'Result': results_22_23\n})\n\ndf1['Win'] = df1['Result'].map({'W': 1, 'L': 0})\ndf1['Season'] = '2022–23'\n\n\nbefore_games_23_24 = [\n    '11/05/2023', '11/09/2023', '11/13/2023', '11/15/2023', '11/19/2023',\n    '11/21/2023', '11/28/2023', '12/01/2024', '12/04/2023', '12/15/2023',\n    '12/18/2023', '12/26/2023', '12/29/2023', '01/02/2024', '01/05/2024',\n    '01/12/2024', '01/16/2024', '01/19/2024', '01/23/2024', '01/26/2024',\n    '01/30/2024', '02/02/2024', '02/06/2024', '02/09/2024', '02/12/2024',\n    '02/16/2024', '02/18/2024', '02/23/2024', '02/27/2024', '03/01/2024', '03/08/2024'\n]\n\nbefore_games_22_23 = [\n    '11/06/2022', '11/10/2022', '11/13/2022', '11/17/2022', '11/19/2022',\n    '11/24/2022', '11/28/2022', '12/04/2022', '12/05/2022', '12/16/2022',\n    '12/19/2022', '12/27/2022', '12/30/2022', '01/02/2023', '01/06/2023',\n    '01/09/2023', '01/13/2023', '01/17/2023', '01/20/2023', '01/27/2023',\n    '01/29/2023', '02/03/2023', '02/06/2023', '02/10/2023', '02/14/2023',\n    '02/17/2023', '02/21/2023', '02/24/2023', '02/27/2023', '03/03/2023'\n]\n\ndates_23_24 = pd.to_datetime(before_games_23_24, format='%m/%d/%Y')\nseason1['Date'] = pd.to_datetime(season1['Date'])\ndates_22_23 = pd.to_datetime(before_games_22_23, format='%m/%d/%Y')\nseason1['Date'] = pd.to_datetime(season1['Date'])\n\nbefore_games2 = season2[season2['Date'].isin(before_games_23_24)]\nbefore_games1 = season1[season1['Date'].isin(before_games_22_23)]\n\n/var/folders/y7/ptqmbdxx7sd_k5_4ynr96zg00000gn/T/ipykernel_61383/1009311768.py:25: FutureWarning:\n\nThe behavior of 'isin' with dtype=datetime64[ns] and castable values (e.g. strings) is deprecated. In a future version, these will not be considered matching by isin. Explicitly cast to the appropriate dtype before calling isin instead.\n\n\n\n\nafter_games_23_24 = [\n    '11/07/2023', '11/11/2023', '11/15/2023', '11/17/2023', '11/21/2023',\n    '11/23/2023', '11/30/2023', '12/03/2024', '12/06/2023', '12/17/2023',\n    '12/20/2023', '12/28/2023', '12/31/2023', '01/04/2024', '01/07/2024',\n    '01/14/2024', '01/18/2024', '01/21/2024', '01/25/2024', '01/28/2024',\n    '02/01/2024', '02/04/2024', '02/06/2024', '02/11/2024', '02/14/2024',\n    '02/18/2024', '02/20/2024', '02/25/2024', '02/29/2024', '03/03/2024', '03/10/2024'\n]\n\nafter_games_22_23 = [\n    '11/08/2022', '11/12/2022', '11/15/2022', '11/19/2022', '11/21/2022',\n    '11/26/2022', '11/30/2022', '12/04/2022', '12/07/2022', '12/18/2022',\n    '12/21/2022', '12/29/2022', '01/01/2022', '01/04/2023', '01/08/2023',\n    '01/11/2023', '01/15/2023', '01/19/2023', '01/22/2023', '01/29/2023',\n    '01/31/2023', '02/05/2023', '02/08/2023', '02/12/2023', '02/16/2023',\n    '02/19/2023', '02/23/2023', '02/26/2023', '03/01/2023', '03/05/2023'\n]\n\nafter_games2 = season2[season2['Date'].isin(after_games_23_24)]\nafter_games1 = season1[season1['Date'].isin(after_games_22_23)]\n\n/var/folders/y7/ptqmbdxx7sd_k5_4ynr96zg00000gn/T/ipykernel_61383/3368522943.py:20: FutureWarning:\n\nThe behavior of 'isin' with dtype=datetime64[ns] and castable values (e.g. strings) is deprecated. In a future version, these will not be considered matching by isin. Explicitly cast to the appropriate dtype before calling isin instead.\n\n\n\n\ndf1['Cumulative Wins'] = df1['Win'].cumsum()\ndf2['Cumulative Wins'] = df2['Win'].cumsum()\n\ndf1['Game #'] = range(1, len(df2) + 1)\ndf2['Game #'] = range(1, len(df1) + 1)\n\n\ngames2 = season2[season2['Date'].isin(games_23_24)].copy()\ngames2['Date'] = pd.to_datetime(games2['Date'])\n\ndf2['Date'] = pd.to_datetime(df2['Date'])\n\ngames2 = pd.merge(\n    games2,\n    df2[['Date', 'Result', 'Win']],\n    on='Date',\n    how='left'\n)\n\n\ngames_22_23 = pd.to_datetime(games_22_23)\ndf1['Date'] = pd.to_datetime(df1['Date'])\n\ngames1 = season1[season1['Date'].isin(games_22_23)].copy()\ngames1['Date'] = pd.to_datetime(games1['Date'])\n\ngames1 = pd.merge(\n    games1,\n    df1[['Date', 'Result', 'Win']],\n    on='Date',\n    how='left'\n)\n\n\ngames1['Season'] = '2022–23'\ngames2['Season'] = '2023–24'\ncombined = pd.concat([games1, games2]) \navg_load = combined.groupby(['Season', 'Position', 'Win'])['Total Player Load'].mean().reset_index()\navg_load['Result'] = avg_load['Win'].map({1: 'Win', 0: 'Loss'})\navg_load['Group'] = avg_load['Position'] + ' - ' + avg_load['Result']\n\nGraph 1 This first graph shows player load by position on game days between the 2 seasons. The differen colors signify what the average player load was when the game resulted in a win or a loss to show what the average player load by position should be in order to win.\n\nimport matplotlib.patches as mpatches\ncombined.columns = combined.columns.str.strip()\n\ncombined['Result Label'] = combined['Win'].map({1: 'Win', 0: 'Loss'})\n\n# Prepare bar positions\npositions = combined['Position'].unique()\nseasons = ['2022–23', '2023–24']\nresults = ['Win', 'Loss']\n\n# Calculate average values\navg_data = (\n    combined.groupby(['Position', 'Season', 'Result Label'])['Total Player Load']\n    .mean()\n    .reset_index()\n)\n# Set up the plot\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Define colors for seasons\nseason_colors = {'2022–23': '#255394', '2023–24': '#538a56'}\n\n# Define hatches for results\nresult_hatches = {'Win' : '','Loss': '\\\\'}\n\nbar_width = 0.3\ngap = 0.2  # Space between seasons\nx = np.arange(len(positions)) * (len(seasons) * len(results) * bar_width + gap)\n\n# Mapping to get the proper bar placement\noffsets = {\n    ('2022–23', 'Win'): -1.5 * bar_width,\n    ('2022–23', 'Loss'): -0.5 * bar_width,\n    ('2023–24', 'Win'): 0.5 * bar_width + gap / 2,\n    ('2023–24', 'Loss'): 1.5 * bar_width + gap / 2\n}\n\n# Plot each bar\nfor season in seasons:\n    for result in results:\n        subdata = avg_data[\n            (avg_data['Season'] == season) & (avg_data['Result Label'] == result)\n        ]\n        heights = subdata['Total Player Load']\n        bar_pos = x + offsets[(season, result)]\n        ax.bar(\n            bar_pos, \n            heights, \n            width=bar_width, \n            color=season_colors[season],\n            edgecolor='#02014a',\n            alpha=0.7,\n            zorder=2, \n            hatch=result_hatches[result], \n            label=f'{season} {result}' if (season, result) not in offsets else \"\"\n        )\n\nsns.despine()\n\n#plt.axhline(y=167, color='black', linestyle='-', linewidth=2, zorder=-5, alpha=0.6)\n#ax.text( x=ax.get_xlim()[1], y=167, s='Win', va='bottom',ha='right', fontsize=10,\n#color='#02014a')\n#plt.axhline(y=200,color='gray', linestyle='--', linewidth=2, zorder=-5, alpha=0.6)\n#ax.text( x=ax.get_xlim()[1], y=200, s='Loss', va='bottom',ha='right', fontsize=10,\n#color='#02014a')\n#id_y = (167 + 200) / 2  # Midpoint\n#ax.annotate(' 13% Difference', xy=(ax.get_xlim()[1], mid_y), xytext=(-14, 0),textcoords='offset points', va='center', \n#ha='right', fontsize=10)\n\nplt.xticks(x, positions)\n\n\nhandles, labels = ax.get_legend_handles_labels()\nunique_labels = dict(zip(labels, handles))\nwin_patch = mpatches.Patch(facecolor='white', hatch='.', edgecolor='black', label='Win')\nloss_patch = mpatches.Patch(facecolor='white', hatch='\\\\', edgecolor='black', label='Loss')\nax.legend(\n    list(unique_labels.values()) + [win_patch, loss_patch],\n    list(unique_labels.keys()) + ['Win', 'Loss - hatch'],\n    title='Result'\n)\n\nplt.suptitle(\"Avg. Player Load by Position\", fontsize=16, x= 0.23 , y=0.97)\nplt.text(\n    0.15, 0.9,\n    \"between \",\n    fontsize=14,\n    ha='center',\n    transform=plt.gcf().transFigure\n)\nplt.text(\n    0.25, 0.9,\n    \"Season 1\",\n    fontsize=14,\n    color='#255394',\n    weight='bold',\n    ha='center',\n    transform=plt.gcf().transFigure\n)\nplt.text(\n    0.325, 0.9,\n    \" and \",\n    fontsize=14,\n    ha='center',\n    transform=plt.gcf().transFigure\n)\nplt.text(\n    0.4, 0.9,\n    \"Season 2\",\n    fontsize=14,\n    color='#538a56',\n    weight='bold',\n    ha='center',\n    transform=plt.gcf().transFigure\n)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nGraph 2 Here is the code for our heatmap showing the difference in player load by weeke when comparing the 2 seasons. This heatmap includes game and practice data.\n\nimport matplotlib.cm as cm\n# Concatenate the DataFrames\nseason1['Season'] = 1\nseason2['Season'] = 2\ndf_combined = pd.concat([season1, season2])\ndf_combined['Date'] = pd.to_datetime(df_combined['Date'], format='%m/%d/%Y', errors='coerce')\ndf_combined['Week'] = df_combined['Date'].dt.isocalendar().week\n\n# Group by week and season, calculate mean of 'Explosive Efforts' and 'Player Load Per Minute'\nweekly_stats = df_combined.groupby(['Season', 'Week'])[['Explosive Efforts', 'Player Load Per Minute']].mean().reset_index()\n\n# Pivot the table for the heatmap\npivot_df = weekly_stats.pivot(index='Week', columns='Season', values='Player Load Per Minute')\n\n# Calculate the difference between seasons\ndiff_df = pivot_df[2] - pivot_df[1] # Season 2 - Season 1\n\n# Create the heatmap with difference coloring\nplt.figure(figsize=(15, 8))\nax = sns.heatmap(\ndiff_df.values.reshape(1, -1),\ncmap=cm.RdBu_r,\nannot=True,\nfmt=\".1f\",\nxticklabels=False,\nyticklabels=[\"Difference\"],\ncbar_kws={'label': 'Difference (Season 2 - Season 1)'}\n)\n\n# Set x-axis tick positions and labels for each week\ntick_positions = np.arange(0.5, len(diff_df.index) + 0.5) # Centered positions\nax.set_xticks(tick_positions)\nax.set_xticklabels(np.arange(1, len(diff_df.index) + 1)) # Labels starting from 1\n\n# Increase font size of title and axis labels\nplt.suptitle(\"Difference in Avg Player Load Per Minute per Week (Season 2 - Season 1)\", fontsize=16, y=0.97, ha='left', x=0.13)\nplt.text(0.14, 1.04, \"Higher PL in Season 2 is\", ha='center', transform=ax.transAxes, fontsize=14)\nplt.text(0.475, 1.04, \"and higher PL in Season 1 is\", ha='center', transform=ax.transAxes, fontsize=14)\nplt.text(0.275, 1.034, \"Red\", ha='left', va='bottom', transform=ax.transAxes, fontsize=14, color='red', fontweight='bold')\nplt.text(0.63, 1.034, \"Blue\", ha='left', va='bottom', transform=ax.transAxes, fontsize=14, color='blue', fontweight='bold')\n\nplt.xlabel(\"Week\", fontsize=14)\nplt.ylabel(\"Difference\", fontsize=14)\n\n# Remove y-axis tick\nax.yaxis.set_ticks([])\n\nplt.show()\n\n\n\n\n\n\n\n\nGraph 3\n\n# Add Season column \nbefore_games1['Season'] = '2022–23'\nbefore_games2['Season'] = '2023–24'\n\n# Combine the data\npre_game_data = pd.concat([before_games1, before_games2], ignore_index=True)\npre_game_data.columns = pre_game_data.columns.str.strip()\n\n# Remove outliers above 400\npre_game_data = pre_game_data[pre_game_data['Total Player Load'] &lt;= 400]\n\n# Calculate group means\ngroup_means = (\n    pre_game_data.groupby(['Position', 'Season'])['Total Player Load']\n    .mean()\n    .reset_index()\n)\n\n# Set up the plot\nplt.figure(figsize=(10, 6))\nax = sns.stripplot(\n    data=pre_game_data,\n    x='Position',\n    y='Total Player Load',\n    hue='Season',\n    dodge=True,\n    jitter=0.3,\n    size=5,\n    palette={'2022–23': '#255394', '2023–24': '#538a56'},\n    alpha=0.6\n)\n\n# Overlay black horizontal lines and annotate percent differences\npositions = pre_game_data['Position'].unique()\nseason_offsets = {'2022–23': -0.2, '2023–24': 0.2}\n\nfor i, pos in enumerate(positions):\n    mean_s1 = group_means[\n        (group_means['Position'] == pos) & (group_means['Season'] == '2022–23')\n    ]['Total Player Load'].values[0]\n    \n    mean_s2 = group_means[\n        (group_means['Position'] == pos) & (group_means['Season'] == '2023–24')\n    ]['Total Player Load'].values[0]\n    \n    # Add horizontal lines\n    ax.hlines(y=mean_s1, xmin=i + season_offsets['2022–23'] - 0.1, xmax=i + season_offsets['2022–23'] + 0.1, color='black', linewidth=2, zorder=3)\n    ax.hlines(y=mean_s2, xmin=i + season_offsets['2023–24'] - 0.1, xmax=i + season_offsets['2023–24'] + 0.1, color='black', linewidth=2, zorder=3)\n    \n    # Calculate percent difference and annotate\n    if mean_s1 != 0:\n        percent_diff = ((mean_s2 - mean_s1) / mean_s1) * 100\n        percent_label = f\"{percent_diff:+.1f}%\"\n    else:\n        percent_label = \"N/A\"\n    \n    # Annotate to the right of the Season 2 (green) average\n    right_x = i + season_offsets['2023–24'] + 0.17\n    ax.annotate(\n        percent_label,\n        xy=(right_x, mean_s2),\n        va='center',\n        ha='left',\n        fontsize=10,\n        weight='bold',\n        color='black'\n    )\n\n\n# Remove position x-label and add 'S1' and 'S2' labels below each position\nplt.xticks(range(len(positions)), positions)  # Keep position names\nfor i, pos in enumerate(positions):\n    ax.text(i + season_offsets['2022–23'], -25, 'S1', ha='center', va='top', fontsize=10, color='#255394')  # For Season 1\n    ax.text(i + season_offsets['2023–24'], -25, 'S2', ha='center', va='top', fontsize=10, color='#538a56')  # For Season 2\n\n# Title telling the story of differences between the seasons\nplt.title('Average Before Game Player Load Increased Across All Positions', fontsize=16, weight='bold', loc='left', y=1.08)\nplt.suptitle('Increase of 27% or More in 23–24 Season', fontsize=13, x=0.26, y=0.87)\n\n# Final touches\nplt.ylabel('Player Load Before Game')\nplt.xlabel('')\nplt.legend([])  # Remove legend\nsns.despine()\nplt.ylim(0, 400)\nplt.tight_layout()\nplt.show()\n\n/var/folders/y7/ptqmbdxx7sd_k5_4ynr96zg00000gn/T/ipykernel_61383/3089189867.py:2: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n/var/folders/y7/ptqmbdxx7sd_k5_4ynr96zg00000gn/T/ipykernel_61383/3089189867.py:3: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Viz</span>"
    ]
  },
  {
    "objectID": "datadictionary.html",
    "href": "datadictionary.html",
    "title": "5  Data Dictionary",
    "section": "",
    "text": "5.1 Player Performance Metrics",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Dictionary</span>"
    ]
  },
  {
    "objectID": "datadictionary.html#player-performance-metrics",
    "href": "datadictionary.html#player-performance-metrics",
    "title": "5  Data Dictionary",
    "section": "",
    "text": "Metric\nDescription\n\n\n\n\nPosition\nThe player’s role on the team (e.g., Guard, Forward, Center), which influences movement patterns and workload.\n\n\nPeriod Number\nThe specific segment of the game or practice session being recorded.\n\n\nTotal Player Load\nA cumulative measure of the physical workload experienced by a player during a session.\n\n\nPlayer Load Per Minute\nPlayer load normalized per minute to account for differences in playing time.\n\n\nIMA Accel Total\nThe total number of inertial movement accelerations across all intensity levels.\n\n\nIMA Decel Total\nThe total number of inertial movement decelerations across all intensity levels.\n\n\nExplosive Efforts\nThe number of high-intensity movements, such as quick sprints or jumps.\n\n\nSession Total Jump\nThe total number of jumps performed by a player during the session.\n\n\nSession Jumps Per Minute\nThe number of jumps a player performs per minute, useful for workload analysis.\n\n\nTotal High IMA\nThe total number of high-intensity inertial movement activities, capturing rapid changes in motion.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Dictionary</span>"
    ]
  }
]