[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Report Title Here",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#problem-statement",
    "href": "index.html#problem-statement",
    "title": "Report Title Here",
    "section": "Problem Statement",
    "text": "Problem Statement\nIn basketball, physical actions like sprints, jumps, and quick decisions contribute to the overall physical demand placed on players. Tracking this workload helps teams better understand performance trends and identify moments where adjustments might be needed. This report examines how player load relates to individual and team outcomes. Our analysis was guided by three key questions. First, we examined whether workload patterns changed between seasons. Second, we evaluated whether these changes were associated with game outcomes. Third, we considered how these insights could inform coaching decisions.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#analysis",
    "href": "index.html#analysis",
    "title": "Report Title Here",
    "section": "Analysis",
    "text": "Analysis\nWe started by reviewing all the player load data across both seasons. Then we focused on three variables. These were average player load by position, player load per minute each week, and explosive efforts during games. Our goal was to find a story in the data that coaches could use to make informed decisions about training and strategy. When we looked at player load by position, we saw that guards and forwards tended to have lower average loads in games that ended in wins. Centers had about the same load whether the team won or lost. This suggests that efficient and well-paced effort leads to better outcomes. It also suggests adjusting intensity by position in both practice and in-game strategy. When looking at weekly load per minute, we found that Season 2 had much higher levels of effort between Weeks 11 and 21. During that time, the team had a stronger win record compared to the same section in Season 1. This might suggest that higher physical intensity in the middle of the season improved overall fitness.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#conclusion",
    "href": "index.html#conclusion",
    "title": "Report Title Here",
    "section": "Conclusion",
    "text": "Conclusion\nPlayer load can do more than explain what happened in a game. It can help predict future performance and guide how teams prepare. We found that different positions have different workload patterns that are tied to winning. We also found that pushing harder in the middle of the season may lead to better results. Finally, we saw that explosive effort is a good signal of player engagement and energy. Based on what we learned, we suggest personalizing load management instead of giving everyone the same recovery plan. We also suggest increasing physical intensity during the middle of the season when players are most ready to push themselves. Finally, we believe explosive efforts should be tracked regularly to catch signs of fatigue early and avoid injuries. In the future, we could learn even more by bringing in other types of data. For example, heart rate, recovery time, and sleep could give more insight into player health. It would also help to look at how travel and game schedules affect performance. Postseason data might give us the clearest picture of how to help the team succeed during the most important games.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "datacleaning.html",
    "href": "datacleaning.html",
    "title": "1  Data Cleaning",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\nFirst, we need to load the data, and see what it looks like\n\nseason1 = pd.read_csv('~/Downloads/DS2023/Final Project/catapult season 1(in).csv')\nseason2 = pd.read_csv('~/Downloads/DS2023/Final Project/catapult season 2(in).csv')\n\n\nseason1.head()\n\n\n\n\n\n\n\n\nDate\nAbout\nPosition\nPeriod Number\nPeriod\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\n...\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nevent-uuid\ngroup-uuid\n\n\n\n\n0\n3/14/2023\nAthlete I\nGuard\n1\n1. Pre Practice\n0\n87.437\n4.1\n3\n17\n...\n24.0\n95.0\n1.05\n269.0\n306.0\n89.0\n899.0\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n1\n3/14/2023\nAthlete I\nGuard\n2\n2. Drill_Offense_ Flare, Rescreen_Half Court_4v4\n0\n34.257\n8.2\n4\n4\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n2\n3/14/2023\nAthlete I\nGuard\n3\n3. Drill_Defense_PCM_Half Court_4v4\n0\n31.399\n9.9\n1\n4\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n3\n3/14/2023\nAthlete I\nGuard\n4\n4. Drill_Defense_Lane Width Slide_Full Court_1v1\n0\n13.616\n7.0\n1\n2\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n4\n3/14/2023\nAthlete I\nGuard\n5\n5. Drill_Defense_Fake Game_Half Court_2v2\n0\n28.724\n7.7\n2\n8\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n\n\n5 rows × 53 columns\n\n\n\n\nseason2.head()\n\n\n\n\n\n\n\n\nDate\nAbout\nPosition\nPeriod Number\nPeriod\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\n...\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nevent-uuid\ngroup-uuid\n\n\n\n\n0\n3/13/2024\nAthlete E\nForward\n1\n1. Pre Practice\n0\n228.177\n4.9\n11\n36\n...\n23.0\n197.0\n1.75\n266.0\n281.0\n91.0\n957.0\n20.67\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n1\n3/13/2024\nAthlete E\nForward\n2\n2. Drill_Defense_Fake Game_Half Court_1v1\n0\n30.349\n7.4\n1\n3\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n2\n3/13/2024\nAthlete E\nForward\n3\n3. Drill_Defense_Ball Screen Breakdown to Rebo...\n0\n27.615\n5.1\n3\n4\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n3\n3/13/2024\nAthlete E\nForward\n4\n4. Play_Defense_Scramble_Half Court_5v5\n0\n61.841\n6.5\n11\n9\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n4\n3/13/2024\nAthlete E\nForward\n5\n5. Play_Defense_Half Court D_Half Court_5vG\n0\n60.133\n5.3\n6\n7\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n\n\n5 rows × 53 columns\n\n\n\n\nseason1.isnull().sum()\n\nDate                                0\nAbout                               0\nPosition                            0\nPeriod Number                       0\nPeriod                              0\nTotal Acceleration Efforts          0\nTotal Player Load                   0\nPlayer Load Per Minute              0\nIMA Accel Low                       0\nIMA Decel Low                       0\nIMA CoD Left Low                    0\nIMA CoD Right Low                   0\nIMA Accel Medium                    0\nIMA Decel Medium                    0\nIMA CoD Left Medium                 0\nIMA CoD Right Medium                0\nIMA Accel High                      0\nIMA Decel High                      0\nIMA Accel Total                     0\nIMA Decel Total                     0\nIMA CoD Left High                   0\nIMA CoD Right High                  0\nIMA Jump Count Low Band             0\nIMA Jump Count Med Band             0\nIMA Jump Count High Band            0\nExplosive Efforts                   0\nSession Total Jumps             14491\nSession Accel Low               14491\nSession Decel Low               14491\nSession CoD Left Low            14491\nSession CoD Right Low           14491\nSession Accel Med               14491\nSession Decel Medium            14491\nSession CoD Left Medium         14491\nSession CoD Right Medium        14491\nSession IMA Accel High          14491\nSession Decel High              14491\nSession CoD Left High           14491\nSession CoD Right High          14491\nSession IMA Accel Total         14491\nSession IMA Decel Total         14491\nSession Jump Count Low Band     14491\nSession Jump Count Med Band     14491\nSession Jump Count High Band    14491\nSession Total Jump              14491\nSession Jumps Per Minute        14491\nTotal CoD Left                  14491\nTotal CoD Right                 14491\nTotal High IMA                  14491\nTotal IMA                       14491\nIMA/Min                         16070\nevent-uuid                          0\ngroup-uuid                          0\ndtype: int64\n\n\n\nseason2.isnull().sum()\n\nDate                                0\nAbout                               0\nPosition                            0\nPeriod Number                       0\nPeriod                              0\nTotal Acceleration Efforts          0\nTotal Player Load                   0\nPlayer Load Per Minute              0\nIMA Accel Low                       0\nIMA Decel Low                       0\nIMA CoD Left Low                    0\nIMA CoD Right Low                   0\nIMA Accel Medium                    0\nIMA Decel Medium                    0\nIMA CoD Left Medium                 0\nIMA CoD Right Medium                0\nIMA Accel High                      0\nIMA Decel High                      0\nIMA Accel Total                     0\nIMA Decel Total                     0\nIMA CoD Left High                   0\nIMA CoD Right High                  0\nIMA Jump Count Low Band             0\nIMA Jump Count Med Band             0\nIMA Jump Count High Band            0\nExplosive Efforts                   0\nSession Total Jumps             11716\nSession Accel Low               11716\nSession Decel Low               11716\nSession CoD Left Low            11716\nSession CoD Right Low           11716\nSession Accel Med               11716\nSession Decel Medium            11716\nSession CoD Left Medium         11716\nSession CoD Right Medium        11716\nSession IMA Accel High          11716\nSession Decel High              11716\nSession CoD Left High           11716\nSession CoD Right High          11716\nSession IMA Accel Total         11716\nSession IMA Decel Total         11716\nSession Jump Count Low Band     11716\nSession Jump Count Med Band     11716\nSession Jump Count High Band    11716\nSession Total Jump              11716\nSession Jumps Per Minute        11716\nTotal CoD Left                  11716\nTotal CoD Right                 11716\nTotal High IMA                  11716\nTotal IMA                       11716\nIMA/Min                         12461\nevent-uuid                          0\ngroup-uuid                          0\ndtype: int64\n\n\nNext, since there are a lot of N/A values for the columns describing the session as a whole, I’m going to fill in the values for the date so it looks better\n\nnan_columns = season1.iloc[:, 26:-2]\nnan_columns.columns\n\nIndex(['Session Total Jumps', 'Session Accel Low', 'Session Decel Low',\n       'Session CoD Left Low', 'Session CoD Right Low', 'Session Accel Med',\n       'Session Decel Medium', 'Session CoD Left Medium',\n       'Session CoD Right Medium', 'Session IMA Accel High',\n       'Session Decel High', 'Session CoD Left High', 'Session CoD Right High',\n       'Session IMA Accel Total', 'Session IMA Decel Total',\n       'Session Jump Count Low Band', 'Session Jump Count Med Band',\n       'Session Jump Count High Band', 'Session Total Jump',\n       'Session Jumps Per Minute', 'Total CoD Left', 'Total CoD Right',\n       'Total High IMA', 'Total IMA', 'IMA/Min'],\n      dtype='object')\n\n\n\ncolumn_fill = ['Session Total Jumps', 'Session Accel Low', 'Session Decel Low',\n       'Session CoD Left Low', 'Session CoD Right Low', 'Session Accel Med',\n       'Session Decel Medium', 'Session CoD Left Medium',\n       'Session CoD Right Medium', 'Session IMA Accel High',\n       'Session Decel High', 'Session CoD Left High', 'Session CoD Right High',\n       'Session IMA Accel Total', 'Session IMA Decel Total',\n       'Session Jump Count Low Band', 'Session Jump Count Med Band',\n       'Session Jump Count High Band', 'Session Total Jump',\n       'Session Jumps Per Minute', 'Total CoD Left', 'Total CoD Right',\n       'Total High IMA', 'Total IMA', 'IMA/Min']\nseason1[column_fill] = season1.groupby('About')[column_fill].ffill()\nseason1.head()\n\n\n\n\n\n\n\n\nDate\nAbout\nPosition\nPeriod Number\nPeriod\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\n...\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nevent-uuid\ngroup-uuid\n\n\n\n\n0\n3/14/2023\nAthlete I\nGuard\n1\n1. Pre Practice\n0\n87.437\n4.1\n3\n17\n...\n24.0\n95.0\n1.05\n269.0\n306.0\n89.0\n899.0\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n1\n3/14/2023\nAthlete I\nGuard\n2\n2. Drill_Offense_ Flare, Rescreen_Half Court_4v4\n0\n34.257\n8.2\n4\n4\n...\n24.0\n95.0\n1.05\n269.0\n306.0\n89.0\n899.0\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n2\n3/14/2023\nAthlete I\nGuard\n3\n3. Drill_Defense_PCM_Half Court_4v4\n0\n31.399\n9.9\n1\n4\n...\n24.0\n95.0\n1.05\n269.0\n306.0\n89.0\n899.0\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n3\n3/14/2023\nAthlete I\nGuard\n4\n4. Drill_Defense_Lane Width Slide_Full Court_1v1\n0\n13.616\n7.0\n1\n2\n...\n24.0\n95.0\n1.05\n269.0\n306.0\n89.0\n899.0\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n4\n3/14/2023\nAthlete I\nGuard\n5\n5. Drill_Defense_Fake Game_Half Court_2v2\n0\n28.724\n7.7\n2\n8\n...\n24.0\n95.0\n1.05\n269.0\n306.0\n89.0\n899.0\nNaN\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\nc4e1f0fe-b87a-42ca-8f41-b5b0e4cdfab3\n\n\n\n\n5 rows × 53 columns\n\n\n\n\nseason2[column_fill] = season2.groupby('About')[column_fill].ffill()\nseason2.head()\n\n\n\n\n\n\n\n\nDate\nAbout\nPosition\nPeriod Number\nPeriod\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\n...\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nevent-uuid\ngroup-uuid\n\n\n\n\n0\n3/13/2024\nAthlete E\nForward\n1\n1. Pre Practice\n0\n228.177\n4.9\n11\n36\n...\n23.0\n197.0\n1.75\n266.0\n281.0\n91.0\n957.0\n20.67\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n1\n3/13/2024\nAthlete E\nForward\n2\n2. Drill_Defense_Fake Game_Half Court_1v1\n0\n30.349\n7.4\n1\n3\n...\n23.0\n197.0\n1.75\n266.0\n281.0\n91.0\n957.0\n20.67\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n2\n3/13/2024\nAthlete E\nForward\n3\n3. Drill_Defense_Ball Screen Breakdown to Rebo...\n0\n27.615\n5.1\n3\n4\n...\n23.0\n197.0\n1.75\n266.0\n281.0\n91.0\n957.0\n20.67\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n3\n3/13/2024\nAthlete E\nForward\n4\n4. Play_Defense_Scramble_Half Court_5v5\n0\n61.841\n6.5\n11\n9\n...\n23.0\n197.0\n1.75\n266.0\n281.0\n91.0\n957.0\n20.67\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n4\n3/13/2024\nAthlete E\nForward\n5\n5. Play_Defense_Half Court D_Half Court_5vG\n0\n60.133\n5.3\n6\n7\n...\n23.0\n197.0\n1.75\n266.0\n281.0\n91.0\n957.0\n20.67\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n\n\n5 rows × 53 columns\n\n\n\nSince some of the numeric values ended up having a .0 at the end, we decided to remove that to make the look of the dataset cleaner\n\nround_col = ['Session Total Jumps', 'Session Accel Low', 'Session Decel Low',\n       'Session CoD Left Low', 'Session CoD Right Low', 'Session Accel Med',\n       'Session Decel Medium', 'Session CoD Left Medium',\n       'Session CoD Right Medium', 'Session IMA Accel High',\n       'Session Decel High', 'Session CoD Left High', 'Session CoD Right High',\n       'Session IMA Accel Total', 'Session IMA Decel Total',\n       'Session Jump Count Low Band', 'Session Jump Count Med Band',\n       'Session Jump Count High Band', 'Session Total Jump',\n       'Session Jumps Per Minute', 'Total CoD Left', 'Total CoD Right',\n       'Total High IMA', 'Total IMA']\nseason1[round_col] = season1[round_col].round(0).astype('Int64')\nseason2[round_col] = season2[round_col].round(0).astype('Int64')\n\nA lot of values also have three decimal places when they aren’t needed, so we will round them down to one, again, for polishing purposes\n\nseason1['Total Player Load'] = season1['Total Player Load'].round(1)\nseason2['Total Player Load'] = season2['Total Player Load'].round(1)\n\nNext, we just wanted to make sure the dates were all formatted correctly and the same between datasets\n\nseason1['Date'] = pd.to_datetime(season1['Date'], format='%m/%d/%y', errors='coerce')\nseason2['Date'] = pd.to_datetime(season2['Date'], format='%m/%d/%y', errors='coerce')\n\nseason1 = season1.sort_values('Date')\nseason2 = season2.sort_values('Date')\n\n# print a date to check\nprint(season1['Date'].head())\nprint(season2['Date'].head())\n\n0   NaT\n1   NaT\n2   NaT\n3   NaT\n4   NaT\nName: Date, dtype: datetime64[ns]\n0   NaT\n1   NaT\n2   NaT\n3   NaT\n4   NaT\nName: Date, dtype: datetime64[ns]",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "dataviz.html",
    "href": "dataviz.html",
    "title": "3  Data Viz",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nseason2 = pd.read_csv('~/Downloads/DS2023/Final Project/catapult season 2(in).csv')\nseason2.head()\n\n\n\n\n\n\n\n\nDate\nAbout\nPosition\nPeriod Number\nPeriod\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\n...\nSession Jump Count High Band\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nevent-uuid\ngroup-uuid\n\n\n\n\n0\n3/13/2024\nAthlete E\nForward\n1\n1. Pre Practice\n0\n228.177\n4.9\n11\n36\n...\n23.0\n197.0\n1.75\n266.0\n281.0\n91.0\n957.0\n20.67\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n1\n3/13/2024\nAthlete E\nForward\n2\n2. Drill_Defense_Fake Game_Half Court_1v1\n0\n30.349\n7.4\n1\n3\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n2\n3/13/2024\nAthlete E\nForward\n3\n3. Drill_Defense_Ball Screen Breakdown to Rebo...\n0\n27.615\n5.1\n3\n4\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n3\n3/13/2024\nAthlete E\nForward\n4\n4. Play_Defense_Scramble_Half Court_5v5\n0\n61.841\n6.5\n11\n9\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n4\n3/13/2024\nAthlete E\nForward\n5\n5. Play_Defense_Half Court D_Half Court_5vG\n0\n60.133\n5.3\n6\n7\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n735d4b60-9bd0-41d6-a9e5-b94432a01350\nf85f0e57-ac6f-4121-b063-b3800e15571d\n\n\n\n\n5 rows × 53 columns\n\n\n\n\nseason1 = pd.read_csv('~/Downloads/DS2023/Final Project/catapult season 1(in).csv')\n\n\ngames_23_24 = [\n    '11/06/2023', '11/10/2023', '11/14/2023', '11/16/2023', '11/20/2023',\n    '11/22/2023', '11/29/2023', '12/02/2024', '12/05/2023', '12/16/2023',\n    '12/19/2023', '12/27/2023', '12/30/2023', '01/03/2024', '01/06/2024',\n    '01/13/2024', '01/17/2024', '01/20/2024', '01/24/2024', '01/27/2024',\n    '01/31/2024', '02/03/2024', '02/05/2024', '02/10/2024', '02/13/2024',\n    '02/17/2024', '02/19/2024', '02/24/2024', '02/28/2024', '03/02/2024', \n    '03/09/2024'\n]\n\nresults_23_24 = [\n    'W', 'W', 'W', 'W', 'L', 'W', 'W', 'W', 'W', 'W', 'L', 'W', 'L', 'W', 'L', 'L', 'W', 'W', 'W', 'W', \n    'W', 'W', 'W', 'W', 'L', 'W', 'L', 'L', 'W', 'L', 'W'\n]\n\ndf2 = pd.DataFrame({\n    'Date': pd.to_datetime(games_23_24),\n    'Result': results_23_24\n})\n\ndf2['Win'] = df2['Result'].map({'W': 1, 'L': 0})\ndf2['Season'] = '2023–24'\n\n\ngames_22_23 = [\n    '11/07/2022', '11/11/2022', '11/18/2022', '11/20/2022',\n    '11/25/2022', '11/29/2022', '12/03/2022', '12/06/2022', '12/17/2022',\n    '12/20/2022', '12/28/2022', '12/31/2022', '01/03/2023', '01/07/2023',\n    '01/10/2023', '01/14/2023', '01/18/2023', '01/21/2023', '01/28/2023',\n    '01/30/2023', '02/04/2023', '02/07/2023', '02/11/2023', '02/15/2023',\n    '02/18/2023', '02/22/2023', '02/25/2023', '02/28/2023', '03/04/2023', \n    '03/09/2023', '03/10/2023'\n]\n\n#the last game of the ACC playoffs is left out so each season has data for 31 games\n\nresults_22_23 = [\n    'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'L', 'L', 'W', 'W', 'L', 'W', 'W',\n    'W', 'W', 'W', 'W', 'W', 'L', 'W', 'W', 'W', 'W', 'L', 'L', 'W', 'W', 'W', 'W'\n]\n\ndf1 = pd.DataFrame({\n    'Date': pd.to_datetime(games_22_23),\n    'Result': results_22_23\n})\n\ndf1['Win'] = df1['Result'].map({'W': 1, 'L': 0})\ndf1['Season'] = '2022–23'\n\n\nbefore_games_23_24 = [\n    '11/05/2023', '11/09/2023', '11/13/2023', '11/15/2023', '11/19/2023',\n    '11/21/2023', '11/28/2023', '12/01/2024', '12/04/2023', '12/15/2023',\n    '12/18/2023', '12/26/2023', '12/29/2023', '01/02/2024', '01/05/2024',\n    '01/12/2024', '01/16/2024', '01/19/2024', '01/23/2024', '01/26/2024',\n    '01/30/2024', '02/02/2024', '02/06/2024', '02/09/2024', '02/12/2024',\n    '02/16/2024', '02/18/2024', '02/23/2024', '02/27/2024', '03/01/2024', '03/08/2024'\n]\n\nbefore_games_22_23 = [\n    '11/06/2022', '11/10/2022', '11/13/2022', '11/17/2022', '11/19/2022',\n    '11/24/2022', '11/28/2022', '12/04/2022', '12/05/2022', '12/16/2022',\n    '12/19/2022', '12/27/2022', '12/30/2022', '01/02/2023', '01/06/2023',\n    '01/09/2023', '01/13/2023', '01/17/2023', '01/20/2023', '01/27/2023',\n    '01/29/2023', '02/03/2023', '02/06/2023', '02/10/2023', '02/14/2023',\n    '02/17/2023', '02/21/2023', '02/24/2023', '02/27/2023', '03/03/2023'\n]\n\ndates_23_24 = pd.to_datetime(before_games_23_24, format='%m/%d/%Y')\nseason1['Date'] = pd.to_datetime(season1['Date'])\ndates_22_23 = pd.to_datetime(before_games_22_23, format='%m/%d/%Y')\nseason1['Date'] = pd.to_datetime(season1['Date'])\n\nbefore_games2 = season2[season2['Date'].isin(before_games_23_24)]\nbefore_games1 = season1[season1['Date'].isin(before_games_22_23)]\n\n/var/folders/y7/ptqmbdxx7sd_k5_4ynr96zg00000gn/T/ipykernel_33597/1009311768.py:25: FutureWarning:\n\nThe behavior of 'isin' with dtype=datetime64[ns] and castable values (e.g. strings) is deprecated. In a future version, these will not be considered matching by isin. Explicitly cast to the appropriate dtype before calling isin instead.\n\n\n\n\nafter_games_23_24 = [\n    '11/07/2023', '11/11/2023', '11/15/2023', '11/17/2023', '11/21/2023',\n    '11/23/2023', '11/30/2023', '12/03/2024', '12/06/2023', '12/17/2023',\n    '12/20/2023', '12/28/2023', '12/31/2023', '01/04/2024', '01/07/2024',\n    '01/14/2024', '01/18/2024', '01/21/2024', '01/25/2024', '01/28/2024',\n    '02/01/2024', '02/04/2024', '02/06/2024', '02/11/2024', '02/14/2024',\n    '02/18/2024', '02/20/2024', '02/25/2024', '02/29/2024', '03/03/2024', '03/10/2024'\n]\n\nafter_games_22_23 = [\n    '11/08/2022', '11/12/2022', '11/15/2022', '11/19/2022', '11/21/2022',\n    '11/26/2022', '11/30/2022', '12/04/2022', '12/07/2022', '12/18/2022',\n    '12/21/2022', '12/29/2022', '01/01/2022', '01/04/2023', '01/08/2023',\n    '01/11/2023', '01/15/2023', '01/19/2023', '01/22/2023', '01/29/2023',\n    '01/31/2023', '02/05/2023', '02/08/2023', '02/12/2023', '02/16/2023',\n    '02/19/2023', '02/23/2023', '02/26/2023', '03/01/2023', '03/05/2023'\n]\n\nafter_games2 = season2[season2['Date'].isin(after_games_23_24)]\nafter_games1 = season1[season1['Date'].isin(after_games_22_23)]\n\n/var/folders/y7/ptqmbdxx7sd_k5_4ynr96zg00000gn/T/ipykernel_33597/3368522943.py:20: FutureWarning:\n\nThe behavior of 'isin' with dtype=datetime64[ns] and castable values (e.g. strings) is deprecated. In a future version, these will not be considered matching by isin. Explicitly cast to the appropriate dtype before calling isin instead.\n\n\n\n\ndf1['Cumulative Wins'] = df1['Win'].cumsum()\ndf2['Cumulative Wins'] = df2['Win'].cumsum()\n\ndf1['Game #'] = range(1, len(df2) + 1)\ndf2['Game #'] = range(1, len(df1) + 1)\n\n\ngames2 = season2[season2['Date'].isin(games_23_24)].copy()\ngames2['Date'] = pd.to_datetime(games2['Date'])\n\ndf2['Date'] = pd.to_datetime(df2['Date'])\n\ngames2 = pd.merge(\n    games2,\n    df2[['Date', 'Result', 'Win']],\n    on='Date',\n    how='left'\n)\n\n\ngames_22_23 = pd.to_datetime(games_22_23)\ndf1['Date'] = pd.to_datetime(df1['Date'])\n\ngames1 = season1[season1['Date'].isin(games_22_23)].copy()\ngames1['Date'] = pd.to_datetime(games1['Date'])\n\ngames1 = pd.merge(\n    games1,\n    df1[['Date', 'Result', 'Win']],\n    on='Date',\n    how='left'\n)\n\n\ngames1['Season'] = '2022–23'\ngames2['Season'] = '2023–24'\ncombined = pd.concat([games1, games2]) \navg_load = combined.groupby(['Season', 'Position', 'Win'])['Total Player Load'].mean().reset_index()\navg_load['Result'] = avg_load['Win'].map({1: 'Win', 0: 'Loss'})\navg_load['Group'] = avg_load['Position'] + ' - ' + avg_load['Result']\n\nGraph 1 This first graph shows player load by position on game days between the 2 seasons. The differen colors signify what the average player load was when the game resulted in a win or a loss to show what the average player load by position should be in order to win.\n\ncombined.columns = combined.columns.str.strip()\n\ncombined['Result Label'] = combined['Win'].map({1: 'Win', 0: 'Loss'})\n\ng = sns.catplot(\n    data=combined,\n    x='Position',\n    y='Total Player Load',\n    hue='Result Label',\n    col='Season',\n    kind='bar',\n    errorbar=None,\n    estimator='mean',\n    palette={'Win':'#fe5a03', 'Loss': '#130ccc'},\n    height=6,\n    aspect=1\n)\ng.set(xlabel=None)\ng.set(ylabel=None)\ng._legend.remove()\ng.set_titles(\"{col_name}\")\n\nplt.suptitle(\"Avg. Player Load by Position Between Seasons\", fontsize=16, x= 0.23 , y=1.09)\nplt.text(\n    0.19, 1.01,\n    \"Organized by if the game resulted in a \",\n    fontsize=14,\n    ha='center',\n    transform=plt.gcf().transFigure\n)\nplt.text(\n    0.351, 1.01,\n    \"Win\",\n    fontsize=14,\n    color='#fe5a03',\n    weight='bold',\n    ha='center',\n    transform=plt.gcf().transFigure\n)\nplt.text(\n    0.378, 1.01,\n    \" or \",\n    fontsize=14,\n    ha='center',\n    transform=plt.gcf().transFigure\n)\nplt.text(\n    0.41, 1.01,\n    \"Loss\",\n    fontsize=14,\n    color='#130ccc',\n    weight='bold',\n    ha='center',\n    transform=plt.gcf().transFigure\n)\nplt.show()\n\n\n\n\n\n\n\n\nGraph 2 Here is the code for our heatmap showing the difference in player load by weeke when comparing the 2 seasons. This heatmap includes game and practice data.\n\nimport matplotlib.cm as cm\n# Concatenate the DataFrames\nseason1['Season'] = 1\nseason2['Season'] = 2\ndf_combined = pd.concat([season1, season2])\ndf_combined['Date'] = pd.to_datetime(df_combined['Date'], format='%m/%d/%Y', errors='coerce')\ndf_combined['Week'] = df_combined['Date'].dt.isocalendar().week\n\n# Group by week and season, calculate mean of 'Explosive Efforts' and 'Player Load Per Minute'\nweekly_stats = df_combined.groupby(['Season', 'Week'])[['Explosive Efforts', 'Player Load Per Minute']].mean().reset_index()\n\n# Pivot the table for the heatmap\npivot_df = weekly_stats.pivot(index='Week', columns='Season', values='Player Load Per Minute')\n\n# Calculate the difference between seasons\ndiff_df = pivot_df[2] - pivot_df[1] # Season 2 - Season 1\n\n# Create the heatmap with difference coloring\nplt.figure(figsize=(15, 8))\nax = sns.heatmap(\ndiff_df.values.reshape(1, -1),\ncmap=cm.RdBu_r,\nannot=True,\nfmt=\".1f\",\nxticklabels=False,\nyticklabels=[\"Difference\"],\ncbar_kws={'label': 'Difference (Season 2 - Season 1)'}\n)\n\n# Set x-axis tick positions and labels for each week\ntick_positions = np.arange(0.5, len(diff_df.index) + 0.5) # Centered positions\nax.set_xticks(tick_positions)\nax.set_xticklabels(np.arange(1, len(diff_df.index) + 1)) # Labels starting from 1\n\n# Increase font size of title and axis labels\nplt.suptitle(\"Difference in Avg Player Load Per Minute per Week (Season 2 - Season 1)\", fontsize=16, y=0.97, ha='left', x=0.13)\nplt.text(0.14, 1.04, \"Higher PL in Season 2 is\", ha='center', transform=ax.transAxes, fontsize=14)\nplt.text(0.475, 1.04, \"and higher PL in Season 1 is\", ha='center', transform=ax.transAxes, fontsize=14)\nplt.text(0.275, 1.034, \"Red\", ha='left', va='bottom', transform=ax.transAxes, fontsize=14, color='red', fontweight='bold')\nplt.text(0.63, 1.034, \"Blue\", ha='left', va='bottom', transform=ax.transAxes, fontsize=14, color='blue', fontweight='bold')\n\nplt.xlabel(\"Week\", fontsize=14)\nplt.ylabel(\"Difference\", fontsize=14)\n\n# Remove y-axis tick\nax.yaxis.set_ticks([])\n\nplt.show()\n\n\n\n\n\n\n\n\nGraph 3\n\nimport matplotlib.dates as mdates\n\nseason2['Date'] = pd.to_datetime(season2['Date']).dt.normalize()\ngames_23_24_dt = pd.to_datetime(games_23_24).normalize()\n\ngames2 = season2[season2['Date'].isin(games_23_24_dt)].copy()\ngames2['Date'] = pd.to_datetime(games2['Date']).dt.normalize()\n\ndf2['Date'] = pd.to_datetime(df2['Date']).dt.normalize()\n\ngames2 = pd.merge(\n    games2,\n    df2[['Date', 'Result', 'Win']],\n    on='Date',\n    how='left'\n)\n\navg_efforts2 = df2[['Date', 'Result']].copy()\nefforts2 = games2.groupby('Date', as_index=False)['Explosive Efforts'].mean()\navg_efforts2 = avg_efforts2.merge(efforts2, on='Date', how='left')\n\navg_efforts1 = df1[['Date', 'Result']].copy()\nefforts1 = games1.groupby('Date', as_index=False)['Explosive Efforts'].mean()\navg_efforts1 = avg_efforts1.merge(efforts1, on='Date', how='left')\n\nwins1 = avg_efforts1[avg_efforts1['Result'] == 'W']\nlosses1 = avg_efforts1[avg_efforts1['Result'] == 'L']\nwins2 = avg_efforts2[avg_efforts2['Result'] == 'W']\nlosses2 = avg_efforts2[avg_efforts2['Result'] == 'L']\n\n\nfig, axs = plt.subplots(1, 2, figsize=(14, 6), sharey=True)\n\ndef style_axis(ax):\n    ax.spines['left'].set_visible(True)\n    ax.spines['left'].set_color('lightgray')\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n    ax.yaxis.grid(True, color='lightgray', linestyle='-', linewidth=0.7)\n    ax.xaxis.grid(False)\n    ax.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))\n\naxs[0].plot(avg_efforts1['Date'], avg_efforts1['Explosive Efforts'], color='black', linewidth=1, zorder=1)\naxs[0].scatter(wins1['Date'], wins1['Explosive Efforts'], color='#fe5a03', s=50, label='Win', zorder=5)\naxs[0].scatter(losses1['Date'], losses1['Explosive Efforts'], color='#130ccc', s=50, label='Loss', zorder=5)\naxs[0].set_title(\"2022–2023 Season\")\naxs[0].set_ylabel(\"Average Explosive Efforts\")\naxs[0].legend(loc='upper left', bbox_to_anchor=(0, 0.965), frameon=False)\nstyle_axis(axs[0])\n\naxs[1].plot(\n    avg_efforts2.dropna(subset=['Explosive Efforts'])['Date'],\n    avg_efforts2.dropna(subset=['Explosive Efforts'])['Explosive Efforts'],\n    color='black',\n    linewidth=1,\n    zorder=1\n)\naxs[1].scatter(wins2['Date'], wins2['Explosive Efforts'], color='#fe5a03', s=50, label='Win', zorder=5)\naxs[1].scatter(losses2['Date'], losses2['Explosive Efforts'], color='#130ccc', s=50, label='Loss', zorder=5)\n\naxs[1].set_title(\"2023–2024 Season\")\nstyle_axis(axs[1])\n\nplt.suptitle(\"Explosive Efforts Per Game Between Seasons\", fontsize=14)\nplt.figtext(0.5, 0.91, \"Linking Game Outcomes to Explosive Effort Metrics\", ha='center', fontsize=11, color='gray')\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Viz</span>"
    ]
  },
  {
    "objectID": "datadictionary.html",
    "href": "datadictionary.html",
    "title": "4  Data Dictionary",
    "section": "",
    "text": "4.1 Player Performance Metrics",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Dictionary</span>"
    ]
  },
  {
    "objectID": "datadictionary.html#player-performance-metrics",
    "href": "datadictionary.html#player-performance-metrics",
    "title": "4  Data Dictionary",
    "section": "",
    "text": "Metric\nDescription\n\n\n\n\nPosition\nThe player’s role on the team (e.g., Guard, Forward, Center), which influences movement patterns and workload.\n\n\nPeriod Number\nThe specific segment of the game or practice session being recorded.\n\n\nTotal Player Load\nA cumulative measure of the physical workload experienced by a player during a session.\n\n\nPlayer Load Per Minute\nPlayer load normalized per minute to account for differences in playing time.\n\n\nIMA Accel Total\nThe total number of inertial movement accelerations across all intensity levels.\n\n\nIMA Decel Total\nThe total number of inertial movement decelerations across all intensity levels.\n\n\nExplosive Efforts\nThe number of high-intensity movements, such as quick sprints or jumps.\n\n\nSession Total Jump\nThe total number of jumps performed by a player during the session.\n\n\nSession Jumps Per Minute\nThe number of jumps a player performs per minute, useful for workload analysis.\n\n\nTotal High IMA\nThe total number of high-intensity inertial movement activities, capturing rapid changes in motion.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Dictionary</span>"
    ]
  }
]