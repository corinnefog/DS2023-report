{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Data Viz\"\n",
        "format: html\n",
        "---"
      ],
      "id": "47d58d4b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "season2 = pd.read_csv('~/Downloads/DS2023/Final Project/catapult season 2(in).csv')\n",
        "season2.head()"
      ],
      "id": "54afb77b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "season1 = pd.read_csv('~/Downloads/DS2023/Final Project/catapult season 1(in).csv')"
      ],
      "id": "0a73ea4f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "games_23_24 = [\n",
        "    '11/06/2023', '11/10/2023', '11/14/2023', '11/16/2023', '11/20/2023',\n",
        "    '11/22/2023', '11/29/2023', '12/02/2024', '12/05/2023', '12/16/2023',\n",
        "    '12/19/2023', '12/27/2023', '12/30/2023', '01/03/2024', '01/06/2024',\n",
        "    '01/13/2024', '01/17/2024', '01/20/2024', '01/24/2024', '01/27/2024',\n",
        "    '01/31/2024', '02/03/2024', '02/05/2024', '02/10/2024', '02/13/2024',\n",
        "    '02/17/2024', '02/19/2024', '02/24/2024', '02/28/2024', '03/02/2024', \n",
        "    '03/09/2024'\n",
        "]\n",
        "\n",
        "results_23_24 = [\n",
        "    'W', 'W', 'W', 'W', 'L', 'W', 'W', 'W', 'W', 'W', 'L', 'W', 'L', 'W', 'L', 'L', 'W', 'W', 'W', 'W', \n",
        "    'W', 'W', 'W', 'W', 'L', 'W', 'L', 'L', 'W', 'L', 'W'\n",
        "]\n",
        "\n",
        "df2 = pd.DataFrame({\n",
        "    'Date': pd.to_datetime(games_23_24),\n",
        "    'Result': results_23_24\n",
        "})\n",
        "\n",
        "df2['Win'] = df2['Result'].map({'W': 1, 'L': 0})\n",
        "df2['Season'] = '2023–24'"
      ],
      "id": "15cef1ed",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "games_22_23 = [\n",
        "    '11/07/2022', '11/11/2022', '11/18/2022', '11/20/2022',\n",
        "    '11/25/2022', '11/29/2022', '12/03/2022', '12/06/2022', '12/17/2022',\n",
        "    '12/20/2022', '12/28/2022', '12/31/2022', '01/03/2023', '01/07/2023',\n",
        "    '01/10/2023', '01/14/2023', '01/18/2023', '01/21/2023', '01/28/2023',\n",
        "    '01/30/2023', '02/04/2023', '02/07/2023', '02/11/2023', '02/15/2023',\n",
        "    '02/18/2023', '02/22/2023', '02/25/2023', '02/28/2023', '03/04/2023', \n",
        "    '03/09/2023', '03/10/2023'\n",
        "]\n",
        "\n",
        "#the last game of the ACC playoffs is left out so each season has data for 31 games\n",
        "\n",
        "results_22_23 = [\n",
        "    'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'L', 'L', 'W', 'W', 'L', 'W', 'W',\n",
        "    'W', 'W', 'W', 'W', 'W', 'L', 'W', 'W', 'W', 'W', 'L', 'L', 'W', 'W', 'W', 'W'\n",
        "]\n",
        "\n",
        "df1 = pd.DataFrame({\n",
        "    'Date': pd.to_datetime(games_22_23),\n",
        "    'Result': results_22_23\n",
        "})\n",
        "\n",
        "df1['Win'] = df1['Result'].map({'W': 1, 'L': 0})\n",
        "df1['Season'] = '2022–23'"
      ],
      "id": "d59dae93",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "before_games_23_24 = [\n",
        "    '11/05/2023', '11/09/2023', '11/13/2023', '11/15/2023', '11/19/2023',\n",
        "    '11/21/2023', '11/28/2023', '12/01/2024', '12/04/2023', '12/15/2023',\n",
        "    '12/18/2023', '12/26/2023', '12/29/2023', '01/02/2024', '01/05/2024',\n",
        "    '01/12/2024', '01/16/2024', '01/19/2024', '01/23/2024', '01/26/2024',\n",
        "    '01/30/2024', '02/02/2024', '02/06/2024', '02/09/2024', '02/12/2024',\n",
        "    '02/16/2024', '02/18/2024', '02/23/2024', '02/27/2024', '03/01/2024', '03/08/2024'\n",
        "]\n",
        "\n",
        "before_games_22_23 = [\n",
        "    '11/06/2022', '11/10/2022', '11/13/2022', '11/17/2022', '11/19/2022',\n",
        "    '11/24/2022', '11/28/2022', '12/04/2022', '12/05/2022', '12/16/2022',\n",
        "    '12/19/2022', '12/27/2022', '12/30/2022', '01/02/2023', '01/06/2023',\n",
        "    '01/09/2023', '01/13/2023', '01/17/2023', '01/20/2023', '01/27/2023',\n",
        "    '01/29/2023', '02/03/2023', '02/06/2023', '02/10/2023', '02/14/2023',\n",
        "    '02/17/2023', '02/21/2023', '02/24/2023', '02/27/2023', '03/03/2023'\n",
        "]\n",
        "\n",
        "dates_23_24 = pd.to_datetime(before_games_23_24, format='%m/%d/%Y')\n",
        "season1['Date'] = pd.to_datetime(season1['Date'])\n",
        "dates_22_23 = pd.to_datetime(before_games_22_23, format='%m/%d/%Y')\n",
        "season1['Date'] = pd.to_datetime(season1['Date'])\n",
        "\n",
        "before_games2 = season2[season2['Date'].isin(before_games_23_24)]\n",
        "before_games1 = season1[season1['Date'].isin(before_games_22_23)]"
      ],
      "id": "de6c996f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "after_games_23_24 = [\n",
        "    '11/07/2023', '11/11/2023', '11/15/2023', '11/17/2023', '11/21/2023',\n",
        "    '11/23/2023', '11/30/2023', '12/03/2024', '12/06/2023', '12/17/2023',\n",
        "    '12/20/2023', '12/28/2023', '12/31/2023', '01/04/2024', '01/07/2024',\n",
        "    '01/14/2024', '01/18/2024', '01/21/2024', '01/25/2024', '01/28/2024',\n",
        "    '02/01/2024', '02/04/2024', '02/06/2024', '02/11/2024', '02/14/2024',\n",
        "    '02/18/2024', '02/20/2024', '02/25/2024', '02/29/2024', '03/03/2024', '03/10/2024'\n",
        "]\n",
        "\n",
        "after_games_22_23 = [\n",
        "    '11/08/2022', '11/12/2022', '11/15/2022', '11/19/2022', '11/21/2022',\n",
        "    '11/26/2022', '11/30/2022', '12/04/2022', '12/07/2022', '12/18/2022',\n",
        "    '12/21/2022', '12/29/2022', '01/01/2022', '01/04/2023', '01/08/2023',\n",
        "    '01/11/2023', '01/15/2023', '01/19/2023', '01/22/2023', '01/29/2023',\n",
        "    '01/31/2023', '02/05/2023', '02/08/2023', '02/12/2023', '02/16/2023',\n",
        "    '02/19/2023', '02/23/2023', '02/26/2023', '03/01/2023', '03/05/2023'\n",
        "]\n",
        "\n",
        "after_games2 = season2[season2['Date'].isin(after_games_23_24)]\n",
        "after_games1 = season1[season1['Date'].isin(after_games_22_23)]"
      ],
      "id": "0375d0d5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df1['Cumulative Wins'] = df1['Win'].cumsum()\n",
        "df2['Cumulative Wins'] = df2['Win'].cumsum()\n",
        "\n",
        "df1['Game #'] = range(1, len(df2) + 1)\n",
        "df2['Game #'] = range(1, len(df1) + 1)"
      ],
      "id": "4bb7aece",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "games2 = season2[season2['Date'].isin(games_23_24)].copy()\n",
        "games2['Date'] = pd.to_datetime(games2['Date'])\n",
        "\n",
        "df2['Date'] = pd.to_datetime(df2['Date'])\n",
        "\n",
        "games2 = pd.merge(\n",
        "    games2,\n",
        "    df2[['Date', 'Result', 'Win']],\n",
        "    on='Date',\n",
        "    how='left'\n",
        ")"
      ],
      "id": "43ecc58b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "games_22_23 = pd.to_datetime(games_22_23)\n",
        "df1['Date'] = pd.to_datetime(df1['Date'])\n",
        "\n",
        "games1 = season1[season1['Date'].isin(games_22_23)].copy()\n",
        "games1['Date'] = pd.to_datetime(games1['Date'])\n",
        "\n",
        "games1 = pd.merge(\n",
        "    games1,\n",
        "    df1[['Date', 'Result', 'Win']],\n",
        "    on='Date',\n",
        "    how='left'\n",
        ")"
      ],
      "id": "58124721",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "games1['Season'] = '2022–23'\n",
        "games2['Season'] = '2023–24'\n",
        "combined = pd.concat([games1, games2]) \n",
        "avg_load = combined.groupby(['Season', 'Position', 'Win'])['Total Player Load'].mean().reset_index()\n",
        "avg_load['Result'] = avg_load['Win'].map({1: 'Win', 0: 'Loss'})\n",
        "avg_load['Group'] = avg_load['Position'] + ' - ' + avg_load['Result']"
      ],
      "id": "9341ee97",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Graph 1**\n",
        "This first graph shows player load by position on game days between the 2 seasons. The differen colors signify what the average player load was when the game resulted in a win or a loss to show what the average player load by position should be in order to win.\n"
      ],
      "id": "fd02e548"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.patches as mpatches\n",
        "\n",
        "losses1 = games1[games1['Result'] == 'L']\n",
        "losses2 = games2[games2['Result'] == 'L']\n",
        "wins1 = games1[games1['Result'] == 'W']\n",
        "wins2 = games2[games2['Result'] == 'W']\n",
        "\n",
        "Lforward1 = losses1[losses1['Position'] == 'Forward']\n",
        "Lcenter1 = losses1[losses1['Position'] == 'Center']\n",
        "Lguard1 = losses1[losses1['Position'] == 'Guard']\n",
        "\n",
        "Lforward2 = losses2[losses2['Position'] == 'Forward']\n",
        "Lcenter2 = losses2[losses2['Position'] == 'Center']\n",
        "Lguard2 = losses2[losses2['Position'] == 'Guard']\n",
        "\n",
        "Wforward1 = wins1[wins1['Position'] == 'Forward']\n",
        "Wcenter1 = wins1[wins1['Position'] == 'Center']\n",
        "Wguard1 = wins1[wins1['Position'] == 'Guard']\n",
        "\n",
        "Wforward2 = wins2[wins2['Position'] == 'Forward']\n",
        "Wcenter2 = wins2[wins2['Position'] == 'Center']\n",
        "Wguard2 = wins2[wins2['Position'] == 'Guard']\n",
        "\n",
        "\n",
        "group_averages = [\n",
        "    {\"Season\": \"2022–23\", \"Position\": \"Forward\", \"Result\": \"Win\",  \"Total Player Load\": Wforward1['Total Player Load'].mean()},\n",
        "    {\"Season\": \"2022–23\", \"Position\": \"Center\",  \"Result\": \"Win\",  \"Total Player Load\": Wcenter1['Total Player Load'].mean()},\n",
        "    {\"Season\": \"2022–23\", \"Position\": \"Guard\",   \"Result\": \"Win\",  \"Total Player Load\": Wguard1['Total Player Load'].mean()},\n",
        "    {\"Season\": \"2022–23\", \"Position\": \"Forward\", \"Result\": \"Loss\", \"Total Player Load\": Lforward1['Total Player Load'].mean()},\n",
        "    {\"Season\": \"2022–23\", \"Position\": \"Center\",  \"Result\": \"Loss\", \"Total Player Load\": Lcenter1['Total Player Load'].mean()},\n",
        "    {\"Season\": \"2022–23\", \"Position\": \"Guard\",   \"Result\": \"Loss\", \"Total Player Load\": Lguard1['Total Player Load'].mean()},\n",
        "    {\"Season\": \"2023–24\", \"Position\": \"Forward\", \"Result\": \"Win\",  \"Total Player Load\": Wforward2['Total Player Load'].mean()},\n",
        "    {\"Season\": \"2023–24\", \"Position\": \"Center\",  \"Result\": \"Win\",  \"Total Player Load\": Wcenter2['Total Player Load'].mean()},\n",
        "    {\"Season\": \"2023–24\", \"Position\": \"Guard\",   \"Result\": \"Win\",  \"Total Player Load\": Wguard2['Total Player Load'].mean()},\n",
        "    {\"Season\": \"2023–24\", \"Position\": \"Forward\", \"Result\": \"Loss\", \"Total Player Load\": Lforward2['Total Player Load'].mean()},\n",
        "    {\"Season\": \"2023–24\", \"Position\": \"Center\",  \"Result\": \"Loss\", \"Total Player Load\": Lcenter2['Total Player Load'].mean()},\n",
        "    {\"Season\": \"2023–24\", \"Position\": \"Guard\",   \"Result\": \"Loss\", \"Total Player Load\": Lguard2['Total Player Load'].mean()}\n",
        "]\n",
        "\n",
        "\n",
        "df = pd.DataFrame(group_averages)\n",
        "\n",
        "season_colors = {'2022–23': '#255394', '2023–24': '#538a56'}\n",
        "result_hatches = {'Win': '', 'Loss': '\\\\'}\n",
        "\n",
        "positions = df['Position'].unique()\n",
        "seasons = ['2022–23', '2023–24']\n",
        "results = ['Win', 'Loss']\n",
        "\n",
        "bar_width = 0.3\n",
        "gap = 0.2\n",
        "x = np.arange(len(positions)) * (len(seasons) * len(results) * bar_width + gap)\n",
        "\n",
        "offsets = {\n",
        "    ('2022–23', 'Win'): -1.5 * bar_width,\n",
        "    ('2022–23', 'Loss'): -0.5 * bar_width,\n",
        "    ('2023–24', 'Win'): 0.5 * bar_width + gap / 2,\n",
        "    ('2023–24', 'Loss'): 1.5 * bar_width + gap / 2\n",
        "}\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "\n",
        "for season in seasons:\n",
        "    for result in results:\n",
        "        subdata = df[(df['Season'] == season) & (df['Result'] == result)]\n",
        "        heights = subdata['Total Player Load']\n",
        "        bar_pos = x + offsets[(season, result)]\n",
        "        ax.bar(\n",
        "            bar_pos,\n",
        "            heights,\n",
        "            width=bar_width,\n",
        "            color=season_colors[season],\n",
        "            edgecolor='#02014a',\n",
        "            alpha=0.7,\n",
        "            zorder=2,\n",
        "            hatch=result_hatches[result],\n",
        "            label=f'{season} {result}' if (season, result) not in offsets else \"\"\n",
        "        )\n",
        "        \n",
        "sns.despine()\n",
        "\n",
        "plt.xticks(x, positions)\n",
        "\n",
        "for i, pos in enumerate(positions):\n",
        "    s1_center = x[i] + np.mean([offsets[('2022–23', 'Win')], offsets[('2022–23', 'Loss')]])\n",
        "    s2_center = x[i] + np.mean([offsets[('2023–24', 'Win')], offsets[('2023–24', 'Loss')]])\n",
        "    ax.text(s1_center, -15, 'S1', ha='center', va='top', fontsize=10)\n",
        "    ax.text(s2_center, -15, 'S2', ha='center', va='top', fontsize=10)\n",
        "\n",
        "win_patch = mpatches.Patch(facecolor='white', hatch='', edgecolor='black', label='Win')\n",
        "loss_patch = mpatches.Patch(facecolor='white', hatch='\\\\', edgecolor='black', label='Loss')\n",
        "ax.legend(\n",
        "    list(unique_labels.values()) + [win_patch, loss_patch],\n",
        "    list(unique_labels.keys()) + ['Win (hatch)', 'Loss (hatch)'],\n",
        "    title='Season & Result'\n",
        ")\n",
        "\n",
        "plt.suptitle(\"Avg. Player Load by Position\", fontsize=16, x=0.23, y=0.97)\n",
        "plt.text(\n",
        "    0.15, 0.9, \"between \", fontsize=14, ha='center', transform=plt.gcf().transFigure\n",
        ")\n",
        "plt.text(\n",
        "    0.25, 0.9, \"Season 1\", fontsize=14, color='#255394', weight='bold', ha='center',\n",
        "    transform=plt.gcf().transFigure\n",
        ")\n",
        "plt.text(\n",
        "    0.325, 0.9, \" and \", fontsize=14, ha='center', transform=plt.gcf().transFigure\n",
        ")\n",
        "plt.text(\n",
        "    0.4, 0.9, \"Season 2\", fontsize=14, color='#538a56', weight='bold', ha='center',\n",
        "    transform=plt.gcf().transFigure\n",
        ")\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "ffe1bf98",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Graph 2**\n",
        "Here is the code for our heatmap showing the difference in player load by weeke when comparing the 2 seasons. This heatmap includes game and practice data.\n"
      ],
      "id": "7c635b1d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.cm as cm\n",
        "# Concatenate the DataFrames\n",
        "season1['Season'] = 1\n",
        "season2['Season'] = 2\n",
        "df_combined = pd.concat([season1, season2])\n",
        "df_combined['Date'] = pd.to_datetime(df_combined['Date'], format='%m/%d/%Y', errors='coerce')\n",
        "df_combined['Week'] = df_combined['Date'].dt.isocalendar().week\n",
        "\n",
        "# Group by week and season, calculate mean of 'Explosive Efforts' and 'Player Load Per Minute'\n",
        "weekly_stats = df_combined.groupby(['Season', 'Week'])[['Explosive Efforts', 'Player Load Per Minute']].mean().reset_index()\n",
        "\n",
        "# Pivot the table for the heatmap\n",
        "pivot_df = weekly_stats.pivot(index='Week', columns='Season', values='Player Load Per Minute')\n",
        "\n",
        "# Calculate the difference between seasons\n",
        "diff_df = pivot_df[2] - pivot_df[1] # Season 2 - Season 1\n",
        "\n",
        "# Create the heatmap with difference coloring\n",
        "plt.figure(figsize=(15, 8))\n",
        "ax = sns.heatmap(\n",
        "diff_df.values.reshape(1, -1),\n",
        "cmap=cm.RdBu_r,\n",
        "annot=True,\n",
        "fmt=\".1f\",\n",
        "xticklabels=False,\n",
        "yticklabels=[\"Difference\"],\n",
        "cbar_kws={'label': 'Difference (Season 2 - Season 1)'}\n",
        ")\n",
        "\n",
        "# Set x-axis tick positions and labels for each week\n",
        "tick_positions = np.arange(0.5, len(diff_df.index) + 0.5) # Centered positions\n",
        "ax.set_xticks(tick_positions)\n",
        "ax.set_xticklabels(np.arange(1, len(diff_df.index) + 1)) # Labels starting from 1\n",
        "\n",
        "# Increase font size of title and axis labels\n",
        "plt.suptitle(\"Difference in Avg Player Load Per Minute per Week (Season 2 - Season 1)\", fontsize=16, y=0.97, ha='left', x=0.13)\n",
        "plt.text(0.14, 1.04, \"Higher PL in Season 2 is\", ha='center', transform=ax.transAxes, fontsize=14)\n",
        "plt.text(0.475, 1.04, \"and higher PL in Season 1 is\", ha='center', transform=ax.transAxes, fontsize=14)\n",
        "plt.text(0.275, 1.034, \"Red\", ha='left', va='bottom', transform=ax.transAxes, fontsize=14, color='red', fontweight='bold')\n",
        "plt.text(0.63, 1.034, \"Blue\", ha='left', va='bottom', transform=ax.transAxes, fontsize=14, color='blue', fontweight='bold')\n",
        "\n",
        "plt.xlabel(\"Week\", fontsize=14)\n",
        "plt.ylabel(\"Difference\", fontsize=14)\n",
        "\n",
        "# Remove y-axis tick\n",
        "ax.yaxis.set_ticks([])\n",
        "\n",
        "plt.show()"
      ],
      "id": "894fcd25",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Graph 3**\n"
      ],
      "id": "d6986af5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Add Season column \n",
        "before_games1 = before_games1.copy()\n",
        "before_games1['Season'] = '2022–23'\n",
        "before_games2 = before_games2.copy()\n",
        "before_games2['Season'] = '2023–24'\n",
        "\n",
        "\n",
        "# Combine the data\n",
        "pre_game_data = pd.concat([before_games1, before_games2], ignore_index=True)\n",
        "pre_game_data.columns = pre_game_data.columns.str.strip()\n",
        "\n",
        "# Calculate group means\n",
        "group_means = (\n",
        "    pre_game_data.groupby(['Position', 'Season'])['Total Player Load']\n",
        "    .mean()\n",
        "    .reset_index()\n",
        ")\n",
        "\n",
        "# Set up the plot\n",
        "plt.figure(figsize=(10, 6))\n",
        "ax = sns.stripplot(\n",
        "    data=pre_game_data,\n",
        "    x='Position',\n",
        "    y='Total Player Load',\n",
        "    hue='Season',\n",
        "    dodge=True,\n",
        "    jitter=0.3,\n",
        "    size=5,\n",
        "    palette={'2022–23': '#255394', '2023–24': '#538a56'},\n",
        "    alpha=0.6\n",
        ")\n",
        "\n",
        "# Overlay black horizontal lines and annotate percent differences\n",
        "positions = pre_game_data['Position'].unique()\n",
        "season_offsets = {'2022–23': -0.2, '2023–24': 0.2}\n",
        "\n",
        "for i, pos in enumerate(positions):\n",
        "    mean_s1 = group_means[\n",
        "        (group_means['Position'] == pos) & (group_means['Season'] == '2022–23')\n",
        "    ]['Total Player Load'].values[0]\n",
        "    \n",
        "    mean_s2 = group_means[\n",
        "        (group_means['Position'] == pos) & (group_means['Season'] == '2023–24')\n",
        "    ]['Total Player Load'].values[0]\n",
        "    \n",
        "    # Add horizontal lines\n",
        "    ax.hlines(y=mean_s1, xmin=i + season_offsets['2022–23'] - 0.1, xmax=i + season_offsets['2022–23'] + 0.1, color='black', linewidth=2, zorder=3)\n",
        "    ax.hlines(y=mean_s2, xmin=i + season_offsets['2023–24'] - 0.1, xmax=i + season_offsets['2023–24'] + 0.1, color='black', linewidth=2, zorder=3)\n",
        "    \n",
        "    # Calculate percent difference and annotate\n",
        "    if mean_s1 != 0:\n",
        "        percent_diff = ((mean_s2 - mean_s1) / mean_s1) * 100\n",
        "        percent_label = f\"{percent_diff:+.1f}%\"\n",
        "    else:\n",
        "        percent_label = \"N/A\"\n",
        "    \n",
        "    # Annotate to the right of the Season 2 (green) average\n",
        "    right_x = i + season_offsets['2023–24'] + 0.17\n",
        "    ax.annotate(\n",
        "        percent_label,\n",
        "        xy=(right_x, mean_s2),\n",
        "        va='center',\n",
        "        ha='left',\n",
        "        fontsize=10,\n",
        "        weight='bold',\n",
        "        color='black'\n",
        "    )\n",
        "\n",
        "\n",
        "# Remove position x-label and add 'S1' and 'S2' labels below each position\n",
        "plt.xticks(range(len(positions)), positions)  # Keep position names\n",
        "for i, pos in enumerate(positions):\n",
        "    ax.text(i + season_offsets['2022–23'], -25, 'S1', ha='center', va='top', fontsize=10, color='#255394')  # For Season 1\n",
        "    ax.text(i + season_offsets['2023–24'], -25, 'S2', ha='center', va='top', fontsize=10, color='#538a56')  # For Season 2\n",
        "\n",
        "# Title telling the story of differences between the seasons\n",
        "plt.title('Average Before Game Player Load Increased Across All Positions', fontsize=16, weight='bold', loc='left', y=1.08)\n",
        "plt.suptitle('Increase of 17% or More in 23–24 Season', fontsize=13, x=0.26, y=0.87)\n",
        "\n",
        "# Final touches\n",
        "plt.ylabel('Player Load Before Game')\n",
        "plt.xlabel('')\n",
        "plt.legend([])  # Remove legend\n",
        "sns.despine()\n",
        "plt.ylim(0, 400)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "235dab92",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/corinnefogarty/Library/Python/3.13/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}